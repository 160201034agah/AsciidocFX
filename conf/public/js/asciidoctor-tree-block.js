/* Generated by Opal 0.8.0 */
Opal.modules["tree-block/extension"] = function (Opal) {
    Opal.dynamic_require_severity = "ignore";
    var __self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

    if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
    }
    ;
    __self.$include(Opal.get('Asciidoctor'));
    return (function ($base, $super) {
        function $TreeBlock() {
        };
        var __self = $TreeBlock = $klass($base, $super, 'TreeBlock', $TreeBlock);

        var def = __self.$$proto, $scope = __self.$$scope;

        __self.$use_dsl();

        __self.$named("tree");

        __self.$on_context(["open", "literal", "listing"]);

        __self.$parse_content_as("literal");

        return (def.$process = function (parent, reader, attrs) {
                var __self = this;

                var type = (attrs['$[]']("type")),
                    title = (attrs['$[]']("title")),
                    filename = (attrs['$[]']("file")),
                    alt = (attrs['$[]']("alt")),
                    caption = (attrs['$[]']("caption")),
                    width = (attrs['$[]']("width")),
                    role = (attrs['$[]']("role")),
                    link = (attrs['$[]']("link")),
                    float = (attrs['$[]']("float")),
                    height = (attrs['$[]']("height")),
                    scale = (attrs['$[]']("scale")),
                    align = (attrs['$[]']("align")),
                    cache = (attrs['$[]']("cache"));

                var imagesdir = parent.$document().$attr('imagesdir', '');

                if (filename == "") {
                    return nil;
                }

                var targetUri = parent.$image_uri(filename);

                if (cache != "enabled") {

                    var readed = reader.$read();

                    var oldStyle = (readed.match(/#/g) || []).length > (readed.match(/(-|\|)/g) || []).length;
                    var command = oldStyle ? "createFileTree" : "createHighlightFileTree";
                    var parameters = [readed, type, imagesdir, targetUri, width, height];

                    afx[command].apply(afx,parameters);
                }

                var attributes = {
                    "target": filename,
                    "title": title,
                    "alt": alt,
                    "caption": caption,
                    "width": width,
                    "height": height,
                    "scale": scale,
                    "align": align,
                    "role": role,
                    "link": link,
                    "float": float
                };

                var keys = Object.keys(attributes);

                keys.forEach(function (key) {
                    if (attributes[key]["$nil?"]()) {
                        delete attributes[key];
                    }
                });

                return __self.$create_image_block(parent, Opal.hash(attributes))

            }, nil) && 'process';
    })(__self, (($scope.get('Extensions')).$$scope.get('BlockProcessor')));
};
/* Generated by Opal 0.8.0 */
Opal.modules["tree-block"] = function (Opal) {
    Opal.dynamic_require_severity = "ignore";
    var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

    if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
        self.$require("tree-block/extension")
    }
    ;
    return ($a = ($b = $scope.get('Extensions')).$register, $a.$$p = (TMP_1 = function () {
        var self = TMP_1.$$s || this;

        return self.$block($scope.get('TreeBlock'))
    }, TMP_1.$$s = self, TMP_1), $a).call($b);
};

Opal.require('tree-block');
Opal.require('tree-block/extension');