/* Generated by Opal 0.11.99.dev */
(function (Opal) {
    var TMP_1, TMP_4, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified,
        $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $send = Opal.send;

    Opal.add_stubs(['$register', '$block', '$named', '$on_context', '$parse_content_as', '$process', '$[]', '$create_image_block', '$block_macro']);

    $send($$$($$($nesting, 'Asciidoctor'), 'Extensions'), 'register', [], (TMP_1 = function () {
        var self = TMP_1.$$s || this, TMP_2;

        return $send(self, 'block', [], (TMP_2 = function () {
            var self = TMP_2.$$s || this, TMP_3;

            self.$named("chart");
            self.$on_context(["open", "literal", "listing","pass"]);
            self.$parse_content_as("literal");
            return $send(self, 'process', [], (TMP_3 = function (parent, target, attrs) {
                var self = TMP_3.$$s || this, chart_type = nil;

                var reader= target;

                if (parent == null) {
                    parent = nil;
                };

                if (target == null) {
                    target = nil;
                };

                if (attrs == null) {
                    attrs = nil;
                };

                var $a, __self = this;

                var chartType = (attrs['$[]'](2)),
                    title = (attrs['$[]']("title")),
                    alt = (attrs['$[]']("alt")),
                    caption = (attrs['$[]']("caption")),
                    width = (attrs['$[]']("width")),
                    height = (attrs['$[]']("height")),
                    scale = (attrs['$[]']("scale")),
                    align = (attrs['$[]']("align")),
                    type = (attrs['$[]']("type")),
                    role = (attrs['$[]']("role")),
                    link = (attrs['$[]']("link")),
                    float = (attrs['$[]']("float")),
                    filename = (attrs['$[]']("file")),
                    cache = (attrs['$[]']("cache")),
                    opt = (attrs['$[]']("opt")),
                    imagesdir = parent.$document().$attr('imagesdir', '');

                if (filename == "") {
                    return nil;
                }

                if (cache != "enabled") {

                    var parameters = [reader.$read(), imagesdir, parent.$image_uri(filename), chartType, opt].map(function (e) {
                        return e + "";
                    });

                    postMessage(JSON.stringify({
                        type: "afx",
                        func: "chartBuild",
                        parameters: parameters
                    }));
                    //afx.chartBuild();
                }

                var attributes = {
                    "target": filename,
                    "title": title,
                    "alt": alt,
                    "caption": caption,
                    "width": width,
                    "height": height,
                    "scale": scale,
                    "align": align,
                    "role": role,
                    "link": link,
                    "float": float,
                    "opt": opt
                };

                var keys = Object.keys(attributes);

                keys.forEach(function (key) {
                    if (attributes[key]["$nil?"]()) {
                        delete attributes[key];
                    }
                });

                return self.$create_image_block(parent, Opal.hash(attributes));
            }, TMP_3.$$s = self, TMP_3.$$arity = 3, TMP_3));
        }, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2))
    }, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1));
    return $send($$$($$($nesting, 'Asciidoctor'), 'Extensions'), 'register', [], (TMP_4 = function () {
        var self = TMP_4.$$s || this, TMP_5;

        return $send(self, 'block_macro', [], (TMP_5 = function () {
            var self = TMP_5.$$s || this, TMP_6;

            self.$named("chart");
            return $send(self, 'process', [], (TMP_6 = function (parent, target, attrs) {
                var reader= target;
                var self = TMP_6.$$s || this, chart_type = nil;

                if (parent == null) {
                    parent = nil;
                };

                if (target == null) {
                    target = nil;
                };

                if (attrs == null) {
                    attrs = nil;
                };

                var $a, __self = this;

                var csvFile = (attrs['$[]']("data-uri")),
                    chartType = target,
                    title = (attrs['$[]']("title")),
                    alt = (attrs['$[]']("alt")),
                    caption = (attrs['$[]']("caption")),
                    width = (attrs['$[]']("width")),
                    height = (attrs['$[]']("height")),
                    scale = (attrs['$[]']("scale")),
                    align = (attrs['$[]']("align")),
                    type = (attrs['$[]']("type")),
                    role = (attrs['$[]']("role")),
                    link = (attrs['$[]']("link")),
                    float = (attrs['$[]']("float")),
                    filename = (attrs['$[]']("file")),
                    cache = (attrs['$[]']("cache")),
                    opt = (attrs['$[]']("opt")),
                    imagesdir = parent.$document().$attr('imagesdir', '');

                if (filename == "") {
                    return nil;
                }

                if (cache != "enabled") {
                    var parameters = [csvFile, imagesdir, parent.$image_uri(filename), chartType, opt].map(function (e) {
                        return e + "";
                    });

                    postMessage(JSON.stringify({
                        type: "afx",
                        func: "chartBuildFromCsv",
                        parameters: parameters
                    }));
                }

                var attributes = {
                    "target": filename,
                    "title": title,
                    "alt": alt,
                    "caption": caption,
                    "width": width,
                    "height": height,
                    "scale": scale,
                    "align": align,
                    "role": role,
                    "link": link,
                    "float": float,
                    "opt": opt
                };

                var keys = Object.keys(attributes);

                keys.forEach(function (key) {
                    if (attributes[key]["$nil?"]()) {
                        delete attributes[key];
                    }
                });

                return self.$create_image_block(parent, Opal.hash(attributes));
            }, TMP_6.$$s = self, TMP_6.$$arity = 3, TMP_6));
        }, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5))
    }, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4));
})(Opal);