/* Generated by Opal 0.11.99.dev */

(function(Opal) {
    function $rb_plus(lhs, rhs) {
        return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
    }
    function $rb_minus(lhs, rhs) {
        return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
    }
    function $rb_gt(lhs, rhs) {
        return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
    }
    function $rb_lt(lhs, rhs) {
        return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
    }
    function $rb_times(lhs, rhs) {
        return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
    }
    var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $hash = Opal.hash, $truthy = Opal.truthy, $send = Opal.send, $gvars = Opal.gvars;

    Opal.add_stubs(['$freeze', '$+', '$keys', '$empty?', '$!', '$===', '$[]', '$join', '$include?', '$extract_passthroughs', '$each', '$sub_specialchars', '$sub_quotes', '$sub_attributes', '$sub_replacements', '$sub_macros', '$highlight_source', '$sub_callouts', '$sub_post_replacements', '$warn', '$logger', '$restore_passthroughs', '$clear', '$split', '$apply_subs', '$==', '$gsub', '$match?', '$compat_mode', '$convert_quoted_text', '$attributes', '$shift', '$store_attribute', '$!=', '$attribute_undefined', '$counter', '$key?', '$downcase', '$attribute_missing', '$info', '$squeeze', '$delete', '$reject', '$start_with?', '$do_replacement', '$extensions', '$inline_macros?', '$inline_macros', '$regexp', '$instance', '$slice', '$length', '$names', '$config', '$merge', '$[]=', '$-', '$normalize_text', '$parse_attributes', '$process_method', '$text', '$expand_subs', '$text=', '$convert', '$class', '$strip', '$>', '$index', '$min', '$compact', '$end_with?', '$map', '$chop', '$new', '$pop', '$rstrip', '$register', '$tr', '$basename', '$parse', '$<<', '$lstrip', '$split_simple_csv', '$partition', '$sub', '$encode_uri_component', '$style', '$parse_into', '$extname?', '$rindex', '$info?', '$catalog', '$fetch', '$outfilesuffix', '$natural_xrefs', '$resolve_id', '$find', '$footnotes', '$id', '$<', '$size', '$attr?', '$attr', '$to_s', '$read_next_id', '$callouts', '$syntax_highlighter', '$highlight?', '$sub_source', '$extract_callouts', '$name', '$to_sym', '$to_i', '$resolve_lines_to_highlight', '$highlight', '$nil_or_empty?', '$restore_callouts', '$count', '$to_a', '$concat', '$uniq', '$sort', '$*', '$parse_quoted_text_attributes', '$resolve_pass_subs', '$extract_inner_passthrough', '$basebackend?', '$error', '$chr', '$drop', '$&', '$resolve_subs', '$resolve_block_subs', '$private', '$=~', '$shorthand_property_syntax', '$each_char']);
    return (function($base, $parent_nesting) {
        function $Asciidoctor() {};
        var self = $Asciidoctor = $module($base, 'Asciidoctor', $Asciidoctor);

        var def = self.prototype, $nesting = [self].concat($parent_nesting);

        (function($base, $super, $parent_nesting) {
            var self = $ReplacementReplacer = $klass($base, $super, 'ReplacementReplacer', $ReplacementReplacer);

            var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_ReplacementReplacer_apply_subs_1, TMP_ReplacementReplacer_apply_normal_subs_3, TMP_ReplacementReplacer_apply_header_subs_4, TMP_ReplacementReplacer_apply_reftext_subs_5, TMP_ReplacementReplacer_sub_specialchars_6, TMP_ReplacementReplacer_sub_quotes_7, TMP_ReplacementReplacer_sub_attributes_10, TMP_ReplacementReplacer_sub_replacements_16, TMP_ReplacementReplacer_sub_macros_19, TMP_ReplacementReplacer_sub_post_replacements_41, TMP_ReplacementReplacer_sub_source_44, TMP_ReplacementReplacer_sub_callouts_45, TMP_ReplacementReplacer_highlight_source_47, TMP_ReplacementReplacer_resolve_lines_to_highlight_48, TMP_ReplacementReplacer_extract_passthroughs_50, TMP_ReplacementReplacer_restore_passthroughs_54, TMP_ReplacementReplacer_resolve_subs_56, TMP_ReplacementReplacer_resolve_block_subs_58, TMP_ReplacementReplacer_resolve_pass_subs_59, TMP_ReplacementReplacer_expand_subs_60, TMP_ReplacementReplacer_commit_subs_62, TMP_ReplacementReplacer_parse_attributes_63, TMP_ReplacementReplacer_extract_callouts_64, TMP_ReplacementReplacer_restore_callouts_67, TMP_ReplacementReplacer_extract_inner_passthrough_70, TMP_ReplacementReplacer_convert_quoted_text_71, TMP_ReplacementReplacer_do_replacement_72, TMP_ReplacementReplacer_parse_quoted_text_attributes_73, TMP_ReplacementReplacer_normalize_text_74, TMP_ReplacementReplacer_split_simple_csv_75;

            def.passthroughs = def.passthroughs_locked = def.document = def.context = def.parent = def.attributes = def.default_subs = def.content_model = def.subs = def.style = nil;

            Opal.const_set($nesting[0], 'SpecialCharsRx', /[<&>]/);
            Opal.const_set($nesting[0], 'SpecialCharsTr', $hash2([">", "<", "&"], {">": "&gt;", "<": "&lt;", "&": "&amp;"}));
            Opal.const_set($nesting[0], 'QuotedTextSniffRx', $hash(false, /[*_`#^~]/, true, /[*'_+#^~]/));
            Opal.const_set($nesting[0], 'BASIC_SUBS', ["specialcharacters"]).$freeze();
            Opal.const_set($nesting[0], 'HEADER_SUBS', ["specialcharacters", "attributes"]).$freeze();
            Opal.const_set($nesting[0], 'NO_SUBS', []).$freeze();
            Opal.const_set($nesting[0], 'NORMAL_SUBS', ["specialcharacters", "quotes", "attributes", "replacements", "macros", "post_replacements"]).$freeze();
            Opal.const_set($nesting[0], 'REFTEXT_SUBS', ["specialcharacters", "quotes", "replacements"]).$freeze();
            Opal.const_set($nesting[0], 'VERBATIM_SUBS', ["specialcharacters", "callouts"]).$freeze();
            Opal.const_set($nesting[0], 'SUB_GROUPS', $hash2(["none", "normal", "verbatim", "specialchars"], {"none": $$($nesting, 'NO_SUBS'), "normal": $$($nesting, 'NORMAL_SUBS'), "verbatim": $$($nesting, 'VERBATIM_SUBS'), "specialchars": $$($nesting, 'BASIC_SUBS')}));
            Opal.const_set($nesting[0], 'SUB_HINTS', $hash2(["a", "m", "n", "p", "q", "r", "c", "v"], {"a": "attributes", "m": "macros", "n": "normal", "p": "post_replacements", "q": "quotes", "r": "replacements", "c": "specialcharacters", "v": "verbatim"}));
            Opal.const_set($nesting[0], 'SUB_OPTIONS', $hash2(["block", "inline"], {"block": $rb_plus($rb_plus($$($nesting, 'SUB_GROUPS').$keys(), $$($nesting, 'NORMAL_SUBS')), ["callouts"]), "inline": $rb_plus($$($nesting, 'SUB_GROUPS').$keys(), $$($nesting, 'NORMAL_SUBS'))}));
            Opal.const_set($nesting[0], 'CAN', "\u0018");
            Opal.const_set($nesting[0], 'DEL', "\u007F");
            Opal.const_set($nesting[0], 'PASS_START', "\u0096");
            Opal.const_set($nesting[0], 'PASS_END', "\u0097");
            Opal.const_set($nesting[0], 'PassSlotRx', new RegExp("" + ($$($nesting, 'PASS_START')) + "(\\d+)" + ($$($nesting, 'PASS_END'))));
            Opal.const_set($nesting[0], 'HighlightedPassSlotRx', new RegExp("" + "<span\\b[^>]*>" + ($$($nesting, 'PASS_START')) + "</span>[^\\d]*(\\d+)[^\\d]*<span\\b[^>]*>" + ($$($nesting, 'PASS_END')) + "</span>"));
            Opal.const_set($nesting[0], 'RS', "\\");
            Opal.const_set($nesting[0], 'R_SB', "]");
            Opal.const_set($nesting[0], 'ESC_R_SB', "\\]");
            Opal.const_set($nesting[0], 'PLUS', "+");

            Opal.def(self, '$apply_subs', TMP_ReplacementReplacer_apply_subs_1 = function $$apply_subs(text, subs) {
                var $a, TMP_2, self = this, is_multiline = nil, passthrus = nil, clear_passthrus = nil;



                if (subs == null) {
                    subs = $$($nesting, 'NORMAL_SUBS');
                };
                if ($truthy(($truthy($a = text['$empty?']()) ? $a : subs['$!']()))) {
                    return text};
                if ($truthy((is_multiline = $$$('::', 'Array')['$==='](text)))) {
                    text = (function() {if ($truthy(text['$[]'](1))) {

                        return text.$join($$($nesting, 'LF'));
                    } else {
                        return text['$[]'](0)
                    }; return nil; })()};
                if ($truthy(subs['$include?']("macros"))) {

                    text = self.$extract_passthroughs(text);
                    if ($truthy(self.passthroughs['$empty?']())) {
                    } else {

                        passthrus = self.passthroughs;
                        self.passthroughs_locked = ($truthy($a = self.passthroughs_locked) ? $a : (clear_passthrus = true));
                    };};
                $send(subs, 'each', [], (TMP_2 = function(type){var self = TMP_2.$$s || this, $case = nil;



                    if (type == null) {
                        type = nil;
                    };
                    return (function() {$case = type;
                        if ("specialcharacters"['$===']($case)) {return (text = self.$sub_specialchars(text))}
                        else if ("quotes"['$===']($case)) {return (text = self.$sub_quotes(text))}
                        else if ("attributes"['$===']($case)) {if ($truthy(text['$include?']($$($nesting, 'ATTR_REF_HEAD')))) {
                            return (text = self.$sub_attributes(text))
                        } else {
                            return nil
                        }}
                        else if ("replacements"['$===']($case)) {return (text = self.$sub_replacements(text))}
                        else if ("macros"['$===']($case)) {return (text = self.$sub_macros(text))}
                        else if ("highlight"['$===']($case)) {return (text = self.$highlight_source(text, subs['$include?']("callouts")))}
                        else if ("callouts"['$===']($case)) {if ($truthy(subs['$include?']("highlight"))) {
                            return nil
                        } else {
                            return (text = self.$sub_callouts(text))
                        }}
                        else if ("post_replacements"['$===']($case)) {return (text = self.$sub_post_replacements(text))}
                        else {return self.$logger().$warn("" + "unknown substitution type " + (type))}})();}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2));
                if ($truthy(passthrus)) {

                    text = self.$restore_passthroughs(text);
                    if ($truthy(clear_passthrus)) {

                        passthrus.$clear();
                        self.passthroughs_locked = nil;};};
                if ($truthy(is_multiline)) {

                    return text.$split($$($nesting, 'LF'), -1);
                } else {
                    return text
                };
            }, TMP_ReplacementReplacer_apply_subs_1.$$arity = -2);

            Opal.def(self, '$apply_normal_subs', TMP_ReplacementReplacer_apply_normal_subs_3 = function $$apply_normal_subs(text) {
                var self = this;

                return self.$apply_subs(text, $$($nesting, 'NORMAL_SUBS'))
            }, TMP_ReplacementReplacer_apply_normal_subs_3.$$arity = 1);

            Opal.def(self, '$apply_header_subs', TMP_ReplacementReplacer_apply_header_subs_4 = function $$apply_header_subs(text) {
                var self = this;

                return self.$apply_subs(text, $$($nesting, 'HEADER_SUBS'))
            }, TMP_ReplacementReplacer_apply_header_subs_4.$$arity = 1);
            Opal.alias(self, "apply_title_subs", "apply_subs");

            Opal.def(self, '$apply_reftext_subs', TMP_ReplacementReplacer_apply_reftext_subs_5 = function $$apply_reftext_subs(text) {
                var self = this;

                return self.$apply_subs(text, $$($nesting, 'REFTEXT_SUBS'))
            }, TMP_ReplacementReplacer_apply_reftext_subs_5.$$arity = 1);
            if ($$($nesting, 'RUBY_ENGINE')['$==']("opal")) {

                Opal.def(self, '$sub_specialchars', TMP_ReplacementReplacer_sub_specialchars_6 = function $$sub_specialchars(text) {
                    var $a, $b, self = this;

                    if ($truthy(($truthy($a = ($truthy($b = text['$include?'](">")) ? $b : text['$include?']("&"))) ? $a : text['$include?']("<")))) {

                        return text.$gsub($$($nesting, 'SpecialCharsRx'), $$($nesting, 'SpecialCharsTr'));
                    } else {
                        return text
                    }
                }, TMP_ReplacementReplacer_sub_specialchars_6.$$arity = 1)
            } else {
                nil
            };
            Opal.alias(self, "sub_specialcharacters", "sub_specialchars");

            Opal.def(self, '$sub_quotes', TMP_ReplacementReplacer_sub_quotes_7 = function $$sub_quotes(text) {
                var TMP_8, self = this, compat = nil;


                if ($truthy($$($nesting, 'QuotedTextSniffRx')['$[]']((compat = self.document.$compat_mode()))['$match?'](text))) {
                    $send($$($nesting, 'QUOTE_SUBS')['$[]'](compat), 'each', [], (TMP_8 = function(type, scope, pattern){var self = TMP_8.$$s || this, TMP_9;



                        if (type == null) {
                            type = nil;
                        };

                        if (scope == null) {
                            scope = nil;
                        };

                        if (pattern == null) {
                            pattern = nil;
                        };
                        return (text = $send(text, 'gsub', [pattern], (TMP_9 = function(){var self = TMP_9.$$s || this;
                            if ($gvars["~"] == null) $gvars["~"] = nil;

                            return self.$convert_quoted_text($gvars["~"], type, scope)}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9)));}, TMP_8.$$s = self, TMP_8.$$arity = 3, TMP_8))};
                return text;
            }, TMP_ReplacementReplacer_sub_quotes_7.$$arity = 1);

            Opal.def(self, '$sub_attributes', TMP_ReplacementReplacer_sub_attributes_10 = function $$sub_attributes(text, opts) {
                var TMP_11, TMP_13, TMP_14, TMP_15, self = this, doc_attrs = nil, drop = nil, drop_line = nil, drop_line_severity = nil, drop_empty_line = nil, attribute_undefined = nil, attribute_missing = nil, lines = nil;



                if (opts == null) {
                    opts = $hash2([], {});
                };
                doc_attrs = self.document.$attributes();
                drop = (drop_line = (drop_line_severity = (drop_empty_line = (attribute_undefined = (attribute_missing = nil)))));
                text = $send(text, 'gsub', [$$($nesting, 'AttributeReferenceRx')], (TMP_11 = function(){var self = TMP_11.$$s || this, $a, $b, $c, TMP_12, $case = nil, args = nil, _ = nil, value = nil, key = nil;
                    if (self.document == null) self.document = nil;

                    if ($truthy(($truthy($a = (($b = $gvars['~']) === nil ? nil : $b['$[]'](1))['$==']($$($nesting, 'RS'))) ? $a : (($b = $gvars['~']) === nil ? nil : $b['$[]'](4))['$==']($$($nesting, 'RS'))))) {
                        return "" + "{" + ((($a = $gvars['~']) === nil ? nil : $a['$[]'](2))) + "}"
                    } else if ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](3)))) {
                        return (function() {$case = (args = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)).$split(":", 3)).$shift();
                            if ("set"['$===']($case)) {
                                $b = $$($nesting, 'Parser').$store_attribute(args['$[]'](0), ($truthy($c = args['$[]'](1)) ? $c : ""), self.document), $a = Opal.to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (value = ($a[1] == null ? nil : $a[1])), $b;
                                if ($truthy(($truthy($a = value) ? $a : (attribute_undefined = ($truthy($b = attribute_undefined) ? $b : ($truthy($c = doc_attrs['$[]']("attribute-undefined")) ? $c : $$($nesting, 'Compliance').$attribute_undefined())))['$!=']("drop-line")))) {
                                    return (drop = (drop_empty_line = $$($nesting, 'DEL')))
                                } else {
                                    return (drop = (drop_line = $$($nesting, 'CAN')))
                                };}
                            else if ("counter2"['$===']($case)) {
                                $send(self.document, 'counter', Opal.to_a(args));
                                return (drop = (drop_empty_line = $$($nesting, 'DEL')));}
                            else {return $send(self.document, 'counter', Opal.to_a(args))}})()
                    } else if ($truthy(doc_attrs['$key?']((key = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)).$downcase())))) {
                        return doc_attrs['$[]'](key)
                    } else if ($truthy((value = $$($nesting, 'INTRINSIC_ATTRIBUTES')['$[]'](key)))) {
                        return value
                    } else {
                        return (function() {$case = (attribute_missing = ($truthy($a = attribute_missing) ? $a : ($truthy($b = ($truthy($c = opts['$[]']("attribute_missing")) ? $c : doc_attrs['$[]']("attribute-missing"))) ? $b : $$($nesting, 'Compliance').$attribute_missing())));
                            if ("drop"['$===']($case)) {return (drop = (drop_empty_line = $$($nesting, 'DEL')))}
                            else if ("drop-line"['$===']($case)) {
                                if ((drop_line_severity = ($truthy($a = drop_line_severity) ? $a : ($truthy($b = opts['$[]']("drop_line_severity")) ? $b : "info")))['$==']("info")) {
                                    $send(self.$logger(), 'info', [], (TMP_12 = function(){var self = TMP_12.$$s || this;

                                        return "" + "dropping line containing reference to missing attribute: " + (key)}, TMP_12.$$s = self, TMP_12.$$arity = 0, TMP_12))};
                                return (drop = (drop_line = $$($nesting, 'CAN')));}
                            else if ("warn"['$===']($case)) {
                                self.$logger().$warn("" + "skipping reference to missing attribute: " + (key));
                                return (($a = $gvars['~']) === nil ? nil : $a['$[]'](0));}
                            else {return (($a = $gvars['~']) === nil ? nil : $a['$[]'](0))}})()
                    }}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11));
                if ($truthy(drop)) {
                    if ($truthy(drop_empty_line)) {

                        lines = text.$squeeze($$($nesting, 'DEL')).$split($$($nesting, 'LF'), -1);
                        if ($truthy(drop_line)) {
                            return $send(lines, 'reject', [], (TMP_13 = function(line){var self = TMP_13.$$s || this, $a, $b, $c;



                                if (line == null) {
                                    line = nil;
                                };
                                return ($truthy($a = ($truthy($b = ($truthy($c = line['$==']($$($nesting, 'DEL'))) ? $c : line['$==']($$($nesting, 'CAN')))) ? $b : line['$start_with?']($$($nesting, 'CAN')))) ? $a : line['$include?']($$($nesting, 'CAN')));}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13)).$join($$($nesting, 'LF')).$delete($$($nesting, 'DEL'))
                        } else {
                            return $send(lines, 'reject', [], (TMP_14 = function(line){var self = TMP_14.$$s || this;



                                if (line == null) {
                                    line = nil;
                                };
                                return line['$==']($$($nesting, 'DEL'));}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14)).$join($$($nesting, 'LF')).$delete($$($nesting, 'DEL'))
                        };
                    } else if ($truthy(text['$include?']($$($nesting, 'LF')))) {
                        return $send(text.$split($$($nesting, 'LF'), -1), 'reject', [], (TMP_15 = function(line){var self = TMP_15.$$s || this, $a, $b;



                            if (line == null) {
                                line = nil;
                            };
                            return ($truthy($a = ($truthy($b = line['$==']($$($nesting, 'CAN'))) ? $b : line['$start_with?']($$($nesting, 'CAN')))) ? $a : line['$include?']($$($nesting, 'CAN')));}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15)).$join($$($nesting, 'LF'))
                    } else {
                        return ""
                    }
                } else {
                    return text
                };
            }, TMP_ReplacementReplacer_sub_attributes_10.$$arity = -2);

            Opal.def(self, '$sub_replacements', TMP_ReplacementReplacer_sub_replacements_16 = function $$sub_replacements(text) {
                var TMP_17, self = this;


                if ($truthy($$($nesting, 'ReplaceableTextRx')['$match?'](text))) {
                    $send($$($nesting, 'REPLACEMENTS'), 'each', [], (TMP_17 = function(pattern, replacement, restore){var self = TMP_17.$$s || this, TMP_18;



                        if (pattern == null) {
                            pattern = nil;
                        };

                        if (replacement == null) {
                            replacement = nil;
                        };

                        if (restore == null) {
                            restore = nil;
                        };
                        return (text = $send(text, 'gsub', [pattern], (TMP_18 = function(){var self = TMP_18.$$s || this;
                            if ($gvars["~"] == null) $gvars["~"] = nil;

                            return self.$do_replacement($gvars["~"], replacement, restore)}, TMP_18.$$s = self, TMP_18.$$arity = 0, TMP_18)));}, TMP_17.$$s = self, TMP_17.$$arity = 3, TMP_17))};
                return text;
            }, TMP_ReplacementReplacer_sub_replacements_16.$$arity = 1);

            Opal.def(self, '$sub_macros', TMP_ReplacementReplacer_sub_macros_19 = function $$sub_macros(text) {
                var $a, TMP_20, $b, TMP_22, TMP_25, TMP_27, TMP_29, TMP_30, TMP_33, TMP_34, TMP_35, TMP_36, TMP_37, TMP_38, TMP_39, self = this, found_square_bracket = nil, found_colon = nil, found_macroish = nil, found_macroish_short = nil, doc_attrs = nil, doc = nil, extensions = nil;


                found_square_bracket = text['$include?']("[");
                found_colon = text['$include?'](":");
                found_macroish = ($truthy($a = found_square_bracket) ? found_colon : $a);
                found_macroish_short = ($truthy($a = found_macroish) ? text['$include?'](":[") : $a);
                doc_attrs = (doc = self.document).$attributes();
                if ($truthy(($truthy($a = (extensions = doc.$extensions())) ? extensions['$inline_macros?']() : $a))) {
                    $send(extensions.$inline_macros(), 'each', [], (TMP_20 = function(extension){var self = TMP_20.$$s || this, TMP_21;



                        if (extension == null) {
                            extension = nil;
                        };
                        return (text = $send(text, 'gsub', [extension.$instance().$regexp()], (TMP_21 = function(){var self = TMP_21.$$s || this, $b, $c, match = nil, target = nil, content = nil, attributes = nil, default_attrs = nil, ext_config = nil, $writer = nil, replacement = nil, inline_subs = nil;
                            if ($gvars["~"] == null) $gvars["~"] = nil;


                            if ($truthy((match = (($b = $gvars['~']) === nil ? nil : $b['$[]'](0)))['$start_with?']($$($nesting, 'RS')))) {
                                return (($b = $gvars['~']) === nil ? nil : $b['$[]'](0)).$slice(1, (($b = $gvars['~']) === nil ? nil : $b['$[]'](0)).$length());};
                            if ($truthy($gvars["~"].$names()['$empty?']())) {
                                $b = [(($c = $gvars['~']) === nil ? nil : $c['$[]'](1)), (($c = $gvars['~']) === nil ? nil : $c['$[]'](2))], (target = $b[0]), (content = $b[1]), $b
                            } else {
                                $b = [(function() { try {
                                    return $gvars["~"]['$[]']("target")
                                } catch ($err) {
                                    if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
                                        try {
                                            return nil
                                        } finally { Opal.pop_exception() }
                                    } else { throw $err; }
                                }})(), (function() { try {
                                    return $gvars["~"]['$[]']("content")
                                } catch ($err) {
                                    if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
                                        try {
                                            return nil
                                        } finally { Opal.pop_exception() }
                                    } else { throw $err; }
                                }})()], (target = $b[0]), (content = $b[1]), $b
                            };
                            attributes = (function() {if ($truthy((default_attrs = (ext_config = extension.$config())['$[]']("default_attrs")))) {
                                return default_attrs.$merge()
                            } else {
                                return $hash2([], {})
                            }; return nil; })();
                            if ($truthy(content)) {

                                if ($truthy(content['$empty?']())) {
                                    if (ext_config['$[]']("content_model")['$==']("attributes")) {
                                    } else {

                                        $writer = ["text", content];
                                        $send(attributes, '[]=', Opal.to_a($writer));
                                        $writer[$rb_minus($writer["length"], 1)];
                                    }
                                } else {

                                    content = self.$normalize_text(content, true, true);
                                    if (ext_config['$[]']("content_model")['$==']("attributes")) {
                                        self.$parse_attributes(content, ($truthy($b = ($truthy($c = ext_config['$[]']("positional_attrs")) ? $c : ext_config['$[]']("pos_attrs"))) ? $b : []), $hash2(["into"], {"into": attributes}))
                                    } else {

                                        $writer = ["text", content];
                                        $send(attributes, '[]=', Opal.to_a($writer));
                                        $writer[$rb_minus($writer["length"], 1)];
                                    };
                                };
                                target = ($truthy($b = target) ? $b : (function() {if (ext_config['$[]']("format")['$==']("short")) {
                                    return content
                                } else {
                                    return target
                                }; return nil; })());};
                            if ($truthy($$($nesting, 'Inline')['$===']((replacement = extension.$process_method()['$[]'](self, target, attributes))))) {

                                if ($truthy((inline_subs = replacement.$attributes().$delete("subs")))) {

                                    $writer = [self.$apply_subs(replacement.$text(), self.$expand_subs(inline_subs))];
                                    $send(replacement, 'text=', Opal.to_a($writer));
                                    $writer[$rb_minus($writer["length"], 1)];};
                                return replacement.$convert();
                            } else if ($truthy(replacement)) {

                                self.$logger().$info("" + "expected substitution value for custom inline macro to be of type Inline; got " + (replacement.$class()) + ": " + (match));
                                return replacement;
                            } else {
                                return ""
                            };}, TMP_21.$$s = self, TMP_21.$$arity = 0, TMP_21)));}, TMP_20.$$s = self, TMP_20.$$arity = 1, TMP_20))};
                if ($truthy(doc_attrs['$key?']("experimental"))) {

                    if ($truthy(($truthy($a = found_macroish_short) ? ($truthy($b = text['$include?']("kbd:")) ? $b : text['$include?']("btn:")) : $a))) {
                        text = $send(text, 'gsub', [$$($nesting, 'InlineKbdBtnMacroRx')], (TMP_22 = function(){var self = TMP_22.$$s || this, $c, TMP_23, TMP_24, keys = nil, delim_idx = nil, delim = nil, $writer = nil;

                            if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](1)))) {
                                return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$slice(1, (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$length())
                            } else if ((($c = $gvars['~']) === nil ? nil : $c['$[]'](2))['$==']("kbd")) {

                                if ($truthy((keys = (($c = $gvars['~']) === nil ? nil : $c['$[]'](3)).$strip())['$include?']($$($nesting, 'R_SB')))) {
                                    keys = keys.$gsub($$($nesting, 'ESC_R_SB'), $$($nesting, 'R_SB'))};
                                if ($truthy(($truthy($c = $rb_gt(keys.$length(), 1)) ? (delim_idx = (function() {if ($truthy((delim_idx = keys.$index(",", 1)))) {
                                    return [delim_idx, keys.$index("+", 1)].$compact().$min()
                                } else {

                                    return keys.$index("+", 1);
                                }; return nil; })()) : $c))) {

                                    delim = keys.$slice(delim_idx, 1);
                                    if ($truthy(keys['$end_with?'](delim))) {

                                        keys = $send(keys.$chop().$split(delim, -1), 'map', [], (TMP_23 = function(key){var self = TMP_23.$$s || this;



                                            if (key == null) {
                                                key = nil;
                                            };
                                            return key.$strip();}, TMP_23.$$s = self, TMP_23.$$arity = 1, TMP_23));

                                        $writer = [-1, $rb_plus(keys['$[]'](-1), delim)];
                                        $send(keys, '[]=', Opal.to_a($writer));
                                        $writer[$rb_minus($writer["length"], 1)];;
                                    } else {
                                        keys = $send(keys.$split(delim), 'map', [], (TMP_24 = function(key){var self = TMP_24.$$s || this;



                                            if (key == null) {
                                                key = nil;
                                            };
                                            return key.$strip();}, TMP_24.$$s = self, TMP_24.$$arity = 1, TMP_24))
                                    };
                                } else {
                                    keys = [keys]
                                };
                                return $$($nesting, 'Inline').$new(self, "kbd", nil, $hash2(["attributes"], {"attributes": $hash2(["keys"], {"keys": keys})})).$convert();
                            } else {
                                return $$($nesting, 'Inline').$new(self, "button", self.$normalize_text((($c = $gvars['~']) === nil ? nil : $c['$[]'](3)), true, true)).$convert()
                            }}, TMP_22.$$s = self, TMP_22.$$arity = 0, TMP_22))};
                    if ($truthy(($truthy($a = found_macroish) ? text['$include?']("menu:") : $a))) {
                        text = $send(text, 'gsub', [$$($nesting, 'InlineMenuMacroRx')], (TMP_25 = function(){var self = TMP_25.$$s || this, $c, TMP_26, menu = nil, items = nil, delim = nil, submenus = nil, menuitem = nil;


                            if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](0))['$start_with?']($$($nesting, 'RS')))) {
                                return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$slice(1, (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$length());};
                            menu = (($c = $gvars['~']) === nil ? nil : $c['$[]'](1));
                            if ($truthy((items = (($c = $gvars['~']) === nil ? nil : $c['$[]'](2))))) {

                                if ($truthy(items['$include?']($$($nesting, 'R_SB')))) {
                                    items = items.$gsub($$($nesting, 'ESC_R_SB'), $$($nesting, 'R_SB'))};
                                if ($truthy((delim = (function() {if ($truthy(items['$include?']("&gt;"))) {
                                    return "&gt;"
                                } else {

                                    if ($truthy(items['$include?'](","))) {
                                        return ","
                                    } else {
                                        return nil
                                    };
                                }; return nil; })()))) {

                                    submenus = $send(items.$split(delim), 'map', [], (TMP_26 = function(it){var self = TMP_26.$$s || this;



                                        if (it == null) {
                                            it = nil;
                                        };
                                        return it.$strip();}, TMP_26.$$s = self, TMP_26.$$arity = 1, TMP_26));
                                    menuitem = submenus.$pop();
                                } else {
                                    $c = [[], items.$rstrip()], (submenus = $c[0]), (menuitem = $c[1]), $c
                                };
                            } else {
                                $c = [[], nil], (submenus = $c[0]), (menuitem = $c[1]), $c
                            };
                            return $$($nesting, 'Inline').$new(self, "menu", nil, $hash2(["attributes"], {"attributes": $hash2(["menu", "submenus", "menuitem"], {"menu": menu, "submenus": submenus, "menuitem": menuitem})})).$convert();}, TMP_25.$$s = self, TMP_25.$$arity = 0, TMP_25))};
                    if ($truthy(($truthy($a = text['$include?']("\"")) ? text['$include?']("&gt;") : $a))) {
                        text = $send(text, 'gsub', [$$($nesting, 'InlineMenuRx')], (TMP_27 = function(){var self = TMP_27.$$s || this, $c, $d, $e, TMP_28, menu = nil, submenus = nil, menuitem = nil;


                            if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](0))['$start_with?']($$($nesting, 'RS')))) {
                                return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$slice(1, (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$length());};
                            $d = $send((($e = $gvars['~']) === nil ? nil : $e['$[]'](1)).$split("&gt;"), 'map', [], (TMP_28 = function(it){var self = TMP_28.$$s || this;



                                if (it == null) {
                                    it = nil;
                                };
                                return it.$strip();}, TMP_28.$$s = self, TMP_28.$$arity = 1, TMP_28)), $c = Opal.to_ary($d), (menu = ($c[0] == null ? nil : $c[0])), (submenus = $slice.call($c, 1)), $d;
                            menuitem = submenus.$pop();
                            return $$($nesting, 'Inline').$new(self, "menu", nil, $hash2(["attributes"], {"attributes": $hash2(["menu", "submenus", "menuitem"], {"menu": menu, "submenus": submenus, "menuitem": menuitem})})).$convert();}, TMP_27.$$s = self, TMP_27.$$arity = 0, TMP_27))};};
                if ($truthy(($truthy($a = found_macroish) ? ($truthy($b = text['$include?']("image:")) ? $b : text['$include?']("icon:")) : $a))) {
                    text = $send(text, 'gsub', [$$($nesting, 'InlineImageMacroRx')], (TMP_29 = function(){var self = TMP_29.$$s || this, $c, type = nil, posattrs = nil, target = nil, attrs = nil, $writer = nil;


                        if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](0))['$start_with?']($$($nesting, 'RS')))) {
                            return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$slice(1, (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$length());
                        } else if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](0))['$start_with?']("icon:"))) {
                            $c = ["icon", ["size"]], (type = $c[0]), (posattrs = $c[1]), $c
                        } else {
                            $c = ["image", ["alt", "width", "height"]], (type = $c[0]), (posattrs = $c[1]), $c
                        };
                        target = (($c = $gvars['~']) === nil ? nil : $c['$[]'](1));
                        attrs = self.$parse_attributes((($c = $gvars['~']) === nil ? nil : $c['$[]'](2)), posattrs, $hash2(["unescape_input"], {"unescape_input": true}));
                        if (type['$==']("icon")) {
                        } else {
                            doc.$register("images", [target, (($writer = ["imagesdir", doc_attrs['$[]']("imagesdir")]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])])
                        };
                        ($truthy($c = attrs['$[]']("alt")) ? $c : (($writer = ["alt", (($writer = ["default-alt", $$($nesting, 'Helpers').$basename(target, true).$tr("_-", " ")]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
                        return $$($nesting, 'Inline').$new(self, "image", nil, $hash2(["type", "target", "attributes"], {"type": type, "target": target, "attributes": attrs})).$convert();}, TMP_29.$$s = self, TMP_29.$$arity = 0, TMP_29))};
                if ($truthy(($truthy($a = ($truthy($b = text['$include?']("((")) ? text['$include?']("))") : $b)) ? $a : ($truthy($b = found_macroish_short) ? text['$include?']("dexterm") : $b)))) {
                    text = $send(text, 'gsub', [$$($nesting, 'InlineIndextermMacroRx')], (TMP_30 = function(){var self = TMP_30.$$s || this, $c, TMP_31, $d, TMP_32, $case = nil, attrlist = nil, primary = nil, attrs = nil, $writer = nil, terms = nil, secondary = nil, tertiary = nil, see_also = nil, term = nil, visible = nil, before = nil, after = nil, _ = nil, see = nil, subbed_term = nil;

                        return (function() {$case = (($c = $gvars['~']) === nil ? nil : $c['$[]'](1));
                            if ("indexterm"['$===']($case)) {
                                if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](0))['$start_with?']($$($nesting, 'RS')))) {
                                    return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$slice(1, (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$length());};
                                if ($truthy((attrlist = self.$normalize_text((($c = $gvars['~']) === nil ? nil : $c['$[]'](2)), true, true))['$include?']("="))) {
                                    if ($truthy((primary = (attrs = $$($nesting, 'AttributeList').$new(attrlist, self).$parse())['$[]'](1)))) {


                                        $writer = ["terms", (terms = [primary])];
                                        $send(attrs, '[]=', Opal.to_a($writer));
                                        $writer[$rb_minus($writer["length"], 1)];;
                                        if ($truthy((secondary = attrs['$[]'](2)))) {

                                            terms['$<<'](secondary);
                                            if ($truthy((tertiary = attrs['$[]'](3)))) {
                                                terms['$<<'](tertiary)};};
                                        if ($truthy((see_also = attrs['$[]']("see-also")))) {

                                            $writer = ["see-also", (function() {if ($truthy(see_also['$include?'](","))) {
                                                return $send(see_also.$split(","), 'map', [], (TMP_31 = function(it){var self = TMP_31.$$s || this;



                                                    if (it == null) {
                                                        it = nil;
                                                    };
                                                    return it.$lstrip();}, TMP_31.$$s = self, TMP_31.$$arity = 1, TMP_31))
                                            } else {
                                                return [see_also]
                                            }; return nil; })()];
                                            $send(attrs, '[]=', Opal.to_a($writer));
                                            $writer[$rb_minus($writer["length"], 1)];};
                                    } else {
                                        attrs = $hash2(["terms"], {"terms": (terms = attrlist)})
                                    }
                                } else {
                                    attrs = $hash2(["terms"], {"terms": (terms = self.$split_simple_csv(attrlist))})
                                };
                                return $$($nesting, 'Inline').$new(self, "indexterm", nil, $hash2(["attributes"], {"attributes": attrs})).$convert();}
                            else if ("indexterm2"['$===']($case)) {
                                if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](0))['$start_with?']($$($nesting, 'RS')))) {
                                    return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$slice(1, (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$length());};
                                if ($truthy((term = self.$normalize_text((($c = $gvars['~']) === nil ? nil : $c['$[]'](2)), true, true))['$include?']("="))) {

                                    term = ($truthy($c = ($truthy($d = (attrs = $$($nesting, 'AttributeList').$new(term, self).$parse())['$[]'](1)) ? $d : (attrs = nil))) ? $c : term);
                                    if ($truthy(($truthy($c = attrs) ? (see_also = attrs['$[]']("see-also")) : $c))) {

                                        $writer = ["see-also", (function() {if ($truthy(see_also['$include?'](","))) {
                                            return $send(see_also.$split(","), 'map', [], (TMP_32 = function(it){var self = TMP_32.$$s || this;



                                                if (it == null) {
                                                    it = nil;
                                                };
                                                return it.$lstrip();}, TMP_32.$$s = self, TMP_32.$$arity = 1, TMP_32))
                                        } else {
                                            return [see_also]
                                        }; return nil; })()];
                                        $send(attrs, '[]=', Opal.to_a($writer));
                                        $writer[$rb_minus($writer["length"], 1)];};};
                                return $$($nesting, 'Inline').$new(self, "indexterm", term, $hash2(["attributes", "type"], {"attributes": attrs, "type": "visible"})).$convert();}
                            else {
                                text = (($c = $gvars['~']) === nil ? nil : $c['$[]'](3));
                                if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](0))['$start_with?']($$($nesting, 'RS')))) {
                                    if ($truthy(($truthy($c = text['$start_with?']("(")) ? text['$end_with?'](")") : $c))) {

                                        text = text.$slice(1, $rb_minus(text.$length(), 2));
                                        $c = [true, "(", ")"], (visible = $c[0]), (before = $c[1]), (after = $c[2]), $c;
                                    } else {
                                        return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$slice(1, (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$length());
                                    }
                                } else {

                                    visible = true;
                                    if ($truthy(text['$start_with?']("("))) {
                                        if ($truthy(text['$end_with?'](")"))) {
                                            $c = [text.$slice(1, $rb_minus(text.$length(), 2)), false], (text = $c[0]), (visible = $c[1]), $c
                                        } else {
                                            $c = [text.$slice(1, text.$length()), "(", ""], (text = $c[0]), (before = $c[1]), (after = $c[2]), $c
                                        }
                                    } else if ($truthy(text['$end_with?'](")"))) {
                                        $c = [text.$chop(), "", ")"], (text = $c[0]), (before = $c[1]), (after = $c[2]), $c};
                                };
                                if ($truthy(visible)) {

                                    if ($truthy((term = self.$normalize_text(text, true))['$include?'](";&"))) {
                                        if ($truthy(term['$include?'](" &gt;&gt; "))) {

                                            $d = term.$partition(" &gt;&gt; "), $c = Opal.to_ary($d), (term = ($c[0] == null ? nil : $c[0])), (_ = ($c[1] == null ? nil : $c[1])), (see = ($c[2] == null ? nil : $c[2])), $d;
                                            attrs = $hash2(["see"], {"see": see});
                                        } else if ($truthy(term['$include?'](" &amp;&gt; "))) {

                                            $d = term.$split(" &amp;&gt; "), $c = Opal.to_ary($d), (term = ($c[0] == null ? nil : $c[0])), (see_also = $slice.call($c, 1)), $d;
                                            attrs = $hash2(["see-also"], {"see-also": see_also});}};
                                    subbed_term = $$($nesting, 'Inline').$new(self, "indexterm", term, $hash2(["attributes", "type"], {"attributes": attrs, "type": "visible"})).$convert();
                                } else {

                                    attrs = $hash2([], {});
                                    if ($truthy((terms = self.$normalize_text(text, true))['$include?'](";&"))) {
                                        if ($truthy(terms['$include?'](" &gt;&gt; "))) {

                                            $d = terms.$partition(" &gt;&gt; "), $c = Opal.to_ary($d), (terms = ($c[0] == null ? nil : $c[0])), (_ = ($c[1] == null ? nil : $c[1])), (see = ($c[2] == null ? nil : $c[2])), $d;

                                            $writer = ["see", see];
                                            $send(attrs, '[]=', Opal.to_a($writer));
                                            $writer[$rb_minus($writer["length"], 1)];;
                                        } else if ($truthy(terms['$include?'](" &amp;&gt; "))) {

                                            $d = terms.$split(" &amp;&gt; "), $c = Opal.to_ary($d), (terms = ($c[0] == null ? nil : $c[0])), (see_also = $slice.call($c, 1)), $d;

                                            $writer = ["see-also", see_also];
                                            $send(attrs, '[]=', Opal.to_a($writer));
                                            $writer[$rb_minus($writer["length"], 1)];;}};

                                    $writer = ["terms", (terms = self.$split_simple_csv(terms))];
                                    $send(attrs, '[]=', Opal.to_a($writer));
                                    $writer[$rb_minus($writer["length"], 1)];;
                                    subbed_term = $$($nesting, 'Inline').$new(self, "indexterm", nil, $hash2(["attributes"], {"attributes": attrs})).$convert();
                                };
                                if ($truthy(before)) {
                                    return "" + (before) + (subbed_term) + (after)
                                } else {
                                    return subbed_term
                                };}})()}, TMP_30.$$s = self, TMP_30.$$arity = 0, TMP_30))};
                if ($truthy(($truthy($a = found_colon) ? text['$include?']("://") : $a))) {
                    text = $send(text, 'gsub', [$$($nesting, 'InlineLinkRx')], (TMP_33 = function(){var self = TMP_33.$$s || this, $c, $d, target = nil, prefix = nil, suffix = nil, $case = nil, attrs = nil, link_opts = nil, $writer = nil;


                        if ($truthy((target = (($c = $gvars['~']) === nil ? nil : $c['$[]'](2)))['$start_with?']($$($nesting, 'RS')))) {
                            return "" + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](1))) + (target.$slice(1, target.$length())) + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](4)));};
                        $c = [(($d = $gvars['~']) === nil ? nil : $d['$[]'](1)), ""], (prefix = $c[0]), (suffix = $c[1]), $c;
                        if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](4)))) {

                            if (prefix['$==']("link:")) {
                                prefix = ""};
                            text = (($c = $gvars['~']) === nil ? nil : $c['$[]'](4));
                        } else {

                            if (prefix['$==']("link:")) {
                                return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0));};
                            text = "";
                            $case = (($c = $gvars['~']) === nil ? nil : $c['$[]'](3));
                            if (")"['$===']($case)) {
                                target = target.$chop();
                                suffix = ")";
                                if ($truthy(target['$end_with?']("://"))) {
                                    return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0));};}
                            else if (";"['$===']($case)) {
                                if ($truthy(($truthy($c = prefix['$start_with?']("&lt;")) ? target['$end_with?']("&gt;") : $c))) {

                                    prefix = prefix.$slice(4, prefix.$length());
                                    target = target.$slice(0, $rb_minus(target.$length(), 4));
                                } else if ($truthy((target = target.$chop())['$end_with?'](")"))) {

                                    target = target.$chop();
                                    suffix = ");";
                                } else {
                                    suffix = ";"
                                };
                                if ($truthy(target['$end_with?']("://"))) {
                                    return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0));};}
                            else if (":"['$===']($case)) {
                                if ($truthy((target = target.$chop())['$end_with?'](")"))) {

                                    target = target.$chop();
                                    suffix = "):";
                                } else {
                                    suffix = ":"
                                };
                                if ($truthy(target['$end_with?']("://"))) {
                                    return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0));};};
                        };
                        $c = [nil, $hash2(["type"], {"type": "link"})], (attrs = $c[0]), (link_opts = $c[1]), $c;
                        if ($truthy(text['$empty?']())) {
                        } else {

                            if ($truthy(text['$include?']($$($nesting, 'R_SB')))) {
                                text = text.$gsub($$($nesting, 'ESC_R_SB'), $$($nesting, 'R_SB'))};
                            if ($truthy(($truthy($c = doc.$compat_mode()['$!']()) ? text['$include?']("=") : $c))) {

                                text = ($truthy($c = (attrs = $$($nesting, 'AttributeList').$new(text, self).$parse())['$[]'](1)) ? $c : "");

                                $writer = ["id", attrs['$[]']("id")];
                                $send(link_opts, '[]=', Opal.to_a($writer));
                                $writer[$rb_minus($writer["length"], 1)];;};
                            if ($truthy(text['$end_with?']("^"))) {

                                text = text.$chop();
                                if ($truthy(attrs)) {
                                    ($truthy($c = attrs['$[]']("window")) ? $c : (($writer = ["window", "_blank"]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))
                                } else {
                                    attrs = $hash2(["window"], {"window": "_blank"})
                                };};
                        };
                        if ($truthy(text['$empty?']())) {

                            text = (function() {if ($truthy(doc_attrs['$key?']("hide-uri-scheme"))) {

                                return target.$sub($$($nesting, 'UriSniffRx'), "");
                            } else {
                                return target
                            }; return nil; })();
                            if ($truthy(attrs)) {

                                $writer = ["role", (function() {if ($truthy(attrs['$key?']("role"))) {
                                    return "" + "bare " + (attrs['$[]']("role"))
                                } else {
                                    return "bare"
                                }; return nil; })()];
                                $send(attrs, '[]=', Opal.to_a($writer));
                                $writer[$rb_minus($writer["length"], 1)];
                            } else {
                                attrs = $hash2(["role"], {"role": "bare"})
                            };};
                        doc.$register("links", (($writer = ["target", target]), $send(link_opts, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
                        if ($truthy(attrs)) {

                            $writer = ["attributes", attrs];
                            $send(link_opts, '[]=', Opal.to_a($writer));
                            $writer[$rb_minus($writer["length"], 1)];};
                        return "" + (prefix) + ($$($nesting, 'Inline').$new(self, "anchor", text, link_opts).$convert()) + (suffix);}, TMP_33.$$s = self, TMP_33.$$arity = 0, TMP_33))};
                if ($truthy(($truthy($a = found_macroish) ? ($truthy($b = text['$include?']("link:")) ? $b : text['$include?']("ilto:")) : $a))) {
                    text = $send(text, 'gsub', [$$($nesting, 'InlineLinkMacroRx')], (TMP_34 = function(){var self = TMP_34.$$s || this, $c, mailto = nil, target = nil, mailto_text = nil, attrs = nil, link_opts = nil, $writer = nil;


                        if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](0))['$start_with?']($$($nesting, 'RS')))) {
                            return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$slice(1, (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$length());
                        } else if ($truthy((mailto = (($c = $gvars['~']) === nil ? nil : $c['$[]'](1))))) {
                            target = $rb_plus("mailto:", (mailto_text = (($c = $gvars['~']) === nil ? nil : $c['$[]'](2))))
                        } else {
                            target = (($c = $gvars['~']) === nil ? nil : $c['$[]'](2))
                        };
                        $c = [nil, $hash2(["type"], {"type": "link"})], (attrs = $c[0]), (link_opts = $c[1]), $c;
                        if ($truthy((text = (($c = $gvars['~']) === nil ? nil : $c['$[]'](3)))['$empty?']())) {
                        } else {

                            if ($truthy(text['$include?']($$($nesting, 'R_SB')))) {
                                text = text.$gsub($$($nesting, 'ESC_R_SB'), $$($nesting, 'R_SB'))};
                            if ($truthy(mailto)) {
                                if ($truthy(($truthy($c = doc.$compat_mode()['$!']()) ? text['$include?'](",") : $c))) {

                                    text = ($truthy($c = (attrs = $$($nesting, 'AttributeList').$new(text, self).$parse())['$[]'](1)) ? $c : "");

                                    $writer = ["id", attrs['$[]']("id")];
                                    $send(link_opts, '[]=', Opal.to_a($writer));
                                    $writer[$rb_minus($writer["length"], 1)];;
                                    if ($truthy(attrs['$key?'](2))) {
                                        if ($truthy(attrs['$key?'](3))) {
                                            target = "" + (target) + "?subject=" + ($$($nesting, 'Helpers').$encode_uri_component(attrs['$[]'](2))) + "&amp;body=" + ($$($nesting, 'Helpers').$encode_uri_component(attrs['$[]'](3)))
                                        } else {
                                            target = "" + (target) + "?subject=" + ($$($nesting, 'Helpers').$encode_uri_component(attrs['$[]'](2)))
                                        }};}
                            } else if ($truthy(($truthy($c = doc.$compat_mode()['$!']()) ? text['$include?']("=") : $c))) {

                                text = ($truthy($c = (attrs = $$($nesting, 'AttributeList').$new(text, self).$parse())['$[]'](1)) ? $c : "");

                                $writer = ["id", attrs['$[]']("id")];
                                $send(link_opts, '[]=', Opal.to_a($writer));
                                $writer[$rb_minus($writer["length"], 1)];;};
                            if ($truthy(text['$end_with?']("^"))) {

                                text = text.$chop();
                                if ($truthy(attrs)) {
                                    ($truthy($c = attrs['$[]']("window")) ? $c : (($writer = ["window", "_blank"]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))
                                } else {
                                    attrs = $hash2(["window"], {"window": "_blank"})
                                };};
                        };
                        if ($truthy(text['$empty?']())) {
                            if ($truthy(mailto)) {
                                text = mailto_text
                            } else {

                                if ($truthy(doc_attrs['$key?']("hide-uri-scheme"))) {
                                    if ($truthy((text = target.$sub($$($nesting, 'UriSniffRx'), ""))['$empty?']())) {
                                        text = target}
                                } else {
                                    text = target
                                };
                                if ($truthy(attrs)) {

                                    $writer = ["role", (function() {if ($truthy(attrs['$key?']("role"))) {
                                        return "" + "bare " + (attrs['$[]']("role"))
                                    } else {
                                        return "bare"
                                    }; return nil; })()];
                                    $send(attrs, '[]=', Opal.to_a($writer));
                                    $writer[$rb_minus($writer["length"], 1)];
                                } else {
                                    attrs = $hash2(["role"], {"role": "bare"})
                                };
                            }};
                        doc.$register("links", (($writer = ["target", target]), $send(link_opts, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
                        if ($truthy(attrs)) {

                            $writer = ["attributes", attrs];
                            $send(link_opts, '[]=', Opal.to_a($writer));
                            $writer[$rb_minus($writer["length"], 1)];};
                        return $$($nesting, 'Inline').$new(self, "anchor", text, link_opts).$convert();}, TMP_34.$$s = self, TMP_34.$$arity = 0, TMP_34))};
                if ($truthy(text['$include?']("@"))) {
                    text = $send(text, 'gsub', [$$($nesting, 'InlineEmailRx')], (TMP_35 = function(){var self = TMP_35.$$s || this, $c, target = nil, address = nil;


                        if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](1)))) {
                            return (function() {if ((($c = $gvars['~']) === nil ? nil : $c['$[]'](1))['$==']($$($nesting, 'RS'))) {

                                return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$slice(1, (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$length());
                            } else {
                                return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0))
                            }; return nil; })();};
                        target = $rb_plus("mailto:", (address = (($c = $gvars['~']) === nil ? nil : $c['$[]'](0))));
                        doc.$register("links", target);
                        return $$($nesting, 'Inline').$new(self, "anchor", address, $hash2(["type", "target"], {"type": "link", "target": target})).$convert();}, TMP_35.$$s = self, TMP_35.$$arity = 0, TMP_35))};
                if ($truthy(($truthy($a = ($truthy($b = found_square_bracket) ? self.context['$==']("list_item") : $b)) ? self.parent.$style()['$==']("bibliography") : $a))) {
                    text = $send(text, 'sub', [$$($nesting, 'InlineBiblioAnchorRx')], (TMP_36 = function(){var self = TMP_36.$$s || this, $c;

                        return $$($nesting, 'Inline').$new(self, "anchor", (($c = $gvars['~']) === nil ? nil : $c['$[]'](2)), $hash2(["type", "id"], {"type": "bibref", "id": (($c = $gvars['~']) === nil ? nil : $c['$[]'](1))})).$convert()}, TMP_36.$$s = self, TMP_36.$$arity = 0, TMP_36))};
                if ($truthy(($truthy($a = ($truthy($b = found_square_bracket) ? text['$include?']("[[") : $b)) ? $a : ($truthy($b = found_macroish) ? text['$include?']("or:") : $b)))) {
                    text = $send(text, 'gsub', [$$($nesting, 'InlineAnchorRx')], (TMP_37 = function(){var self = TMP_37.$$s || this, $c, $d, id = nil, reftext = nil;


                        if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](1)))) {
                            return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$slice(1, (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$length());};
                        if ($truthy((id = (($c = $gvars['~']) === nil ? nil : $c['$[]'](2))))) {
                            reftext = (($c = $gvars['~']) === nil ? nil : $c['$[]'](3))
                        } else {

                            id = (($c = $gvars['~']) === nil ? nil : $c['$[]'](4));
                            if ($truthy(($truthy($c = (reftext = (($d = $gvars['~']) === nil ? nil : $d['$[]'](5)))) ? reftext['$include?']($$($nesting, 'R_SB')) : $c))) {
                                reftext = reftext.$gsub($$($nesting, 'ESC_R_SB'), $$($nesting, 'R_SB'))};
                        };
                        return $$($nesting, 'Inline').$new(self, "anchor", reftext, $hash2(["type", "id"], {"type": "ref", "id": id})).$convert();}, TMP_37.$$s = self, TMP_37.$$arity = 0, TMP_37))};
                if ($truthy(($truthy($a = ($truthy($b = text['$include?']("&")) ? text['$include?'](";&l") : $b)) ? $a : ($truthy($b = found_macroish) ? text['$include?']("xref:") : $b)))) {
                    text = $send(text, 'gsub', [$$($nesting, 'InlineXrefMacroRx')], (TMP_38 = function(){var self = TMP_38.$$s || this, $c, $d, attrs = nil, refid = nil, macro = nil, fragment = nil, hash_idx = nil, fragment_len = nil, path = nil, src2src = nil, target = nil, $writer = nil;


                        if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](0))['$start_with?']($$($nesting, 'RS')))) {
                            return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$slice(1, (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$length());};
                        attrs = $hash2([], {});
                        if ($truthy((refid = (($c = $gvars['~']) === nil ? nil : $c['$[]'](1))))) {

                            $d = refid.$split(",", 2), $c = Opal.to_ary($d), (refid = ($c[0] == null ? nil : $c[0])), (text = ($c[1] == null ? nil : $c[1])), $d;
                            if ($truthy(text)) {
                                text = text.$lstrip()};
                        } else {

                            macro = true;
                            refid = (($c = $gvars['~']) === nil ? nil : $c['$[]'](2));
                            if ($truthy((text = (($c = $gvars['~']) === nil ? nil : $c['$[]'](3))))) {

                                if ($truthy(text['$include?']($$($nesting, 'R_SB')))) {
                                    text = text.$gsub($$($nesting, 'ESC_R_SB'), $$($nesting, 'R_SB'))};
                                if ($truthy(($truthy($c = doc.$compat_mode()['$!']()) ? text['$include?']("=") : $c))) {
                                    text = $$($nesting, 'AttributeList').$new(text, self).$parse_into(attrs)['$[]'](1)};};
                        };
                        if ($truthy(doc.$compat_mode())) {
                            fragment = refid
                        } else if ($truthy((hash_idx = refid.$index("#")))) {
                            if ($truthy($rb_gt(hash_idx, 0))) {

                                if ($truthy($rb_gt((fragment_len = $rb_minus($rb_minus(refid.$length(), 1), hash_idx)), 0))) {
                                    $c = [refid.$slice(0, hash_idx), refid.$slice($rb_plus(hash_idx, 1), fragment_len)], (path = $c[0]), (fragment = $c[1]), $c
                                } else {
                                    path = refid.$chop()
                                };
                                if ($truthy(macro)) {
                                    if ($truthy(path['$end_with?'](".adoc"))) {
                                        src2src = (path = path.$slice(0, $rb_minus(path.$length(), 5)))
                                    } else if ($truthy($$($nesting, 'Helpers')['$extname?'](path)['$!']())) {
                                        src2src = path}
                                } else if ($truthy($send(path, 'end_with?', Opal.to_a($$($nesting, 'ASCIIDOC_EXTENSIONS').$keys())))) {
                                    src2src = (path = path.$slice(0, path.$rindex(".")))
                                } else {
                                    src2src = path
                                };
                            } else {
                                $c = [refid, refid.$slice(1, refid.$length())], (target = $c[0]), (fragment = $c[1]), $c
                            }
                        } else if ($truthy(macro)) {
                            if ($truthy(refid['$end_with?'](".adoc"))) {
                                src2src = (path = refid.$slice(0, $rb_minus(refid.$length(), 5)))
                            } else if ($truthy($$($nesting, 'Helpers')['$extname?'](refid))) {
                                path = refid
                            } else {
                                fragment = refid
                            }
                        } else {
                            fragment = refid
                        };
                        if ($truthy(target)) {

                            refid = fragment;
                            if ($truthy(($truthy($c = self.$logger()['$info?']()) ? doc.$catalog()['$[]']("refs")['$[]'](refid)['$!']() : $c))) {
                                self.$logger().$info("" + "possible invalid reference: " + (refid))};
                        } else if ($truthy(path)) {
                            if ($truthy(($truthy($c = src2src) ? ($truthy($d = doc.$attributes()['$[]']("docname")['$=='](path)) ? $d : doc.$catalog()['$[]']("includes")['$[]'](path)) : $c))) {
                                if ($truthy(fragment)) {

                                    $c = [fragment, nil, "" + "#" + (fragment)], (refid = $c[0]), (path = $c[1]), (target = $c[2]), $c;
                                    if ($truthy(($truthy($c = self.$logger()['$info?']()) ? doc.$catalog()['$[]']("refs")['$[]'](refid)['$!']() : $c))) {
                                        self.$logger().$info("" + "possible invalid reference: " + (refid))};
                                } else {
                                    $c = [nil, nil, "#"], (refid = $c[0]), (path = $c[1]), (target = $c[2]), $c
                                }
                            } else {

                                $c = [path, "" + (doc.$attributes()['$[]']("relfileprefix")) + (path) + ((function() {if ($truthy(src2src)) {

                                    return doc.$attributes().$fetch("relfilesuffix", doc.$outfilesuffix());
                                } else {
                                    return ""
                                }; return nil; })())], (refid = $c[0]), (path = $c[1]), $c;
                                if ($truthy(fragment)) {
                                    $c = ["" + (refid) + "#" + (fragment), "" + (path) + "#" + (fragment)], (refid = $c[0]), (target = $c[1]), $c
                                } else {
                                    target = path
                                };
                            }
                        } else if ($truthy(($truthy($c = doc.$compat_mode()) ? $c : $$($nesting, 'Compliance').$natural_xrefs()['$!']()))) {

                            $c = [fragment, "" + "#" + (fragment)], (refid = $c[0]), (target = $c[1]), $c;
                            if ($truthy(($truthy($c = self.$logger()['$info?']()) ? doc.$catalog()['$[]']("refs")['$[]'](refid) : $c))) {
                                self.$logger().$info("" + "possible invalid reference: " + (refid))};
                        } else if ($truthy(doc.$catalog()['$[]']("refs")['$[]'](fragment))) {
                            $c = [fragment, "" + "#" + (fragment)], (refid = $c[0]), (target = $c[1]), $c
                        } else if ($truthy(($truthy($c = ($truthy($d = fragment['$include?'](" ")) ? $d : fragment.$downcase()['$!='](fragment))) ? (refid = doc.$resolve_id(fragment)) : $c))) {
                            $c = [refid, "" + "#" + (refid)], (fragment = $c[0]), (target = $c[1]), $c
                        } else {

                            $c = [fragment, "" + "#" + (fragment)], (refid = $c[0]), (target = $c[1]), $c;
                            if ($truthy(self.$logger()['$info?']())) {
                                self.$logger().$info("" + "possible invalid reference: " + (refid))};
                        };

                        $writer = ["path", path];
                        $send(attrs, '[]=', Opal.to_a($writer));
                        $writer[$rb_minus($writer["length"], 1)];;

                        $writer = ["fragment", fragment];
                        $send(attrs, '[]=', Opal.to_a($writer));
                        $writer[$rb_minus($writer["length"], 1)];;

                        $writer = ["refid", refid];
                        $send(attrs, '[]=', Opal.to_a($writer));
                        $writer[$rb_minus($writer["length"], 1)];;
                        return $$($nesting, 'Inline').$new(self, "anchor", text, $hash2(["type", "target", "attributes"], {"type": "xref", "target": target, "attributes": attrs})).$convert();}, TMP_38.$$s = self, TMP_38.$$arity = 0, TMP_38))};
                if ($truthy(($truthy($a = found_macroish) ? text['$include?']("tnote") : $a))) {
                    text = $send(text, 'gsub', [$$($nesting, 'InlineFootnoteMacroRx')], (TMP_39 = function(){var self = TMP_39.$$s || this, $c, $d, $e, TMP_40, id = nil, index = nil, type = nil, target = nil, footnote = nil;


                        if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](0))['$start_with?']($$($nesting, 'RS')))) {
                            return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$slice(1, (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$length());};
                        if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](1)))) {
                            if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](3)))) {

                                $d = (($e = $gvars['~']) === nil ? nil : $e['$[]'](3)).$split(",", 2), $c = Opal.to_ary($d), (id = ($c[0] == null ? nil : $c[0])), (text = ($c[1] == null ? nil : $c[1])), $d;
                                if ($truthy(doc.$compat_mode())) {
                                } else {
                                    self.$logger().$warn("" + "found deprecated footnoteref macro: " + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](0))) + "; use footnote macro with target instead")
                                };
                            } else {
                                return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0));
                            }
                        } else {

                            id = (($c = $gvars['~']) === nil ? nil : $c['$[]'](2));
                            text = (($c = $gvars['~']) === nil ? nil : $c['$[]'](3));
                        };
                        if ($truthy(id)) {
                            if ($truthy(text)) {

                                text = self.$restore_passthroughs(self.$normalize_text(text, true, true));
                                index = doc.$counter("footnote-number");
                                doc.$register("footnotes", $$$($$($nesting, 'Document'), 'Footnote').$new(index, id, text));
                                $c = ["ref", nil], (type = $c[0]), (target = $c[1]), $c;
                            } else {

                                if ($truthy((footnote = $send(doc.$footnotes(), 'find', [], (TMP_40 = function(candidate){var self = TMP_40.$$s || this;



                                    if (candidate == null) {
                                        candidate = nil;
                                    };
                                    return candidate.$id()['$=='](id);}, TMP_40.$$s = self, TMP_40.$$arity = 1, TMP_40))))) {
                                    $c = [footnote.$index(), footnote.$text()], (index = $c[0]), (text = $c[1]), $c
                                } else {

                                    self.$logger().$warn("" + "invalid footnote reference: " + (id));
                                    $c = [nil, id], (index = $c[0]), (text = $c[1]), $c;
                                };
                                $c = ["xref", id, nil], (type = $c[0]), (target = $c[1]), (id = $c[2]), $c;
                            }
                        } else if ($truthy(text)) {

                            text = self.$restore_passthroughs(self.$normalize_text(text, true, true));
                            index = doc.$counter("footnote-number");
                            doc.$register("footnotes", $$$($$($nesting, 'Document'), 'Footnote').$new(index, id, text));
                            type = (target = nil);
                        } else {
                            return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0));
                        };
                        return $$($nesting, 'Inline').$new(self, "footnote", text, $hash2(["attributes", "id", "target", "type"], {"attributes": $hash2(["index"], {"index": index}), "id": id, "target": target, "type": type})).$convert();}, TMP_39.$$s = self, TMP_39.$$arity = 0, TMP_39))};
                return text;
            }, TMP_ReplacementReplacer_sub_macros_19.$$arity = 1);

            Opal.def(self, '$sub_post_replacements', TMP_ReplacementReplacer_sub_post_replacements_41 = function $$sub_post_replacements(text) {
                var $a, TMP_42, TMP_43, self = this, lines = nil, last = nil;

                if ($truthy(($truthy($a = self.attributes['$[]']("hardbreaks-option")) ? $a : self.document.$attributes()['$[]']("hardbreaks-option")))) {

                    lines = text.$split($$($nesting, 'LF'), -1);
                    if ($truthy($rb_lt(lines.$size(), 2))) {
                        return text};
                    last = lines.$pop();
                    return $send(lines, 'map', [], (TMP_42 = function(line){var self = TMP_42.$$s || this;



                        if (line == null) {
                            line = nil;
                        };
                        return $$($nesting, 'Inline').$new(self, "break", (function() {if ($truthy(line['$end_with?']($$($nesting, 'HARD_LINE_BREAK')))) {

                            return line.$slice(0, $rb_minus(line.$length(), 2));
                        } else {
                            return line
                        }; return nil; })(), $hash2(["type"], {"type": "line"})).$convert();}, TMP_42.$$s = self, TMP_42.$$arity = 1, TMP_42))['$<<'](last).$join($$($nesting, 'LF'));
                } else if ($truthy(($truthy($a = text['$include?']($$($nesting, 'PLUS'))) ? text['$include?']($$($nesting, 'HARD_LINE_BREAK')) : $a))) {
                    return $send(text, 'gsub', [$$($nesting, 'HardLineBreakRx')], (TMP_43 = function(){var self = TMP_43.$$s || this, $b;

                        return $$($nesting, 'Inline').$new(self, "break", (($b = $gvars['~']) === nil ? nil : $b['$[]'](1)), $hash2(["type"], {"type": "line"})).$convert()}, TMP_43.$$s = self, TMP_43.$$arity = 0, TMP_43))
                } else {
                    return text
                }
            }, TMP_ReplacementReplacer_sub_post_replacements_41.$$arity = 1);

            Opal.def(self, '$sub_source', TMP_ReplacementReplacer_sub_source_44 = function $$sub_source(source, process_callouts) {
                var self = this;

                if ($truthy(process_callouts)) {
                    return self.$sub_callouts(self.$sub_specialchars(source))
                } else {

                    return self.$sub_specialchars(source);
                }
            }, TMP_ReplacementReplacer_sub_source_44.$$arity = 2);

            Opal.def(self, '$sub_callouts', TMP_ReplacementReplacer_sub_callouts_45 = function $$sub_callouts(text) {
                var TMP_46, self = this, callout_rx = nil, autonum = nil;


                callout_rx = (function() {if ($truthy(self['$attr?']("line-comment"))) {
                    return $$($nesting, 'CalloutSourceRxMap')['$[]'](self.$attr("line-comment"))
                } else {
                    return $$($nesting, 'CalloutSourceRx')
                }; return nil; })();
                autonum = 0;
                return $send(text, 'gsub', [callout_rx], (TMP_46 = function(){var self = TMP_46.$$s || this, $a;
                    if (self.document == null) self.document = nil;

                    if ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](2)))) {
                        return (($a = $gvars['~']) === nil ? nil : $a['$[]'](0)).$sub($$($nesting, 'RS'), "")
                    } else {
                        return $$($nesting, 'Inline').$new(self, "callout", (function() {if ((($a = $gvars['~']) === nil ? nil : $a['$[]'](4))['$=='](".")) {
                            return (autonum = $rb_plus(autonum, 1)).$to_s()
                        } else {
                            return (($a = $gvars['~']) === nil ? nil : $a['$[]'](4))
                        }; return nil; })(), $hash2(["id", "attributes"], {"id": self.document.$callouts().$read_next_id(), "attributes": $hash2(["guard"], {"guard": (($a = $gvars['~']) === nil ? nil : $a['$[]'](1))})})).$convert()
                    }}, TMP_46.$$s = self, TMP_46.$$arity = 0, TMP_46));
            }, TMP_ReplacementReplacer_sub_callouts_45.$$arity = 1);

            Opal.def(self, '$highlight_source', TMP_ReplacementReplacer_highlight_source_47 = function $$highlight_source(source, process_callouts) {
                var $a, $b, $c, self = this, syntax_hl = nil, callout_marks = nil, doc_attrs = nil, syntax_hl_name = nil, linenums_mode = nil, start_line_number = nil, highlight_lines = nil, highlighted = nil, source_offset = nil;


                if ($truthy(($truthy($a = (syntax_hl = self.document.$syntax_highlighter())) ? syntax_hl['$highlight?']() : $a))) {
                } else {
                    return self.$sub_source(source, process_callouts)
                };
                if ($truthy(process_callouts)) {
                    $b = self.$extract_callouts(source), $a = Opal.to_ary($b), (source = ($a[0] == null ? nil : $a[0])), (callout_marks = ($a[1] == null ? nil : $a[1])), $b};
                doc_attrs = self.document.$attributes();
                syntax_hl_name = syntax_hl.$name();
                if ($truthy((linenums_mode = (function() {if ($truthy(self['$attr?']("linenums"))) {
                    return ($truthy($a = doc_attrs['$[]']("" + (syntax_hl_name) + "-linenums-mode")) ? $a : "table").$to_sym()
                } else {
                    return nil
                }; return nil; })()))) {
                    if ($truthy($rb_lt((start_line_number = self.$attr("start", 1).$to_i()), 1))) {
                        start_line_number = 1}};
                if ($truthy(self['$attr?']("highlight"))) {
                    highlight_lines = self.$resolve_lines_to_highlight(source, self.$attr("highlight"))};
                $b = syntax_hl.$highlight(self, source, self.$attr("language"), $hash2(["callouts", "css_mode", "highlight_lines", "number_lines", "start_line_number", "style"], {"callouts": callout_marks, "css_mode": ($truthy($c = doc_attrs['$[]']("" + (syntax_hl_name) + "-css")) ? $c : "class").$to_sym(), "highlight_lines": highlight_lines, "number_lines": linenums_mode, "start_line_number": start_line_number, "style": doc_attrs['$[]']("" + (syntax_hl_name) + "-style")})), $a = Opal.to_ary($b), (highlighted = ($a[0] == null ? nil : $a[0])), (source_offset = ($a[1] == null ? nil : $a[1])), $b;
                if ($truthy(self.passthroughs['$empty?']())) {
                } else {
                    highlighted = highlighted.$gsub($$($nesting, 'HighlightedPassSlotRx'), "" + ($$($nesting, 'PASS_START')) + "\\1" + ($$($nesting, 'PASS_END')))
                };
                if ($truthy(callout_marks['$nil_or_empty?']())) {
                    return highlighted
                } else {

                    return self.$restore_callouts(highlighted, callout_marks, source_offset);
                };
            }, TMP_ReplacementReplacer_highlight_source_47.$$arity = 2);

            Opal.def(self, '$resolve_lines_to_highlight', TMP_ReplacementReplacer_resolve_lines_to_highlight_48 = function $$resolve_lines_to_highlight(source, spec) {
                var TMP_49, self = this, lines = nil;


                lines = [];
                if ($truthy(spec['$include?'](" "))) {
                    spec = spec.$delete(" ")};
                $send((function() {if ($truthy(spec['$include?'](","))) {

                    return spec.$split(",");
                } else {

                    return spec.$split(";");
                }; return nil; })(), 'map', [], (TMP_49 = function(entry){var self = TMP_49.$$s || this, $a, $b, negate = nil, delim = nil, from = nil, to = nil, line_nums = nil;



                    if (entry == null) {
                        entry = nil;
                    };
                    if ($truthy(entry['$start_with?']("!"))) {

                        entry = entry.$slice(1, entry.$length());
                        negate = true;};
                    if ($truthy((delim = (function() {if ($truthy(entry['$include?'](".."))) {
                        return ".."
                    } else {

                        if ($truthy(entry['$include?']("-"))) {
                            return "-"
                        } else {
                            return nil
                        };
                    }; return nil; })()))) {

                        $b = entry.$partition(delim), $a = Opal.to_ary($b), (from = ($a[0] == null ? nil : $a[0])), (delim = ($a[1] == null ? nil : $a[1])), (to = ($a[2] == null ? nil : $a[2])), $b;
                        if ($truthy(($truthy($a = to['$empty?']()) ? $a : $rb_lt((to = to.$to_i()), 0)))) {
                            to = $rb_plus(source.$count($$($nesting, 'LF')), 1)};
                        line_nums = Opal.Range.$new(from.$to_i(), to, false).$to_a();
                        if ($truthy(negate)) {
                            return (lines = $rb_minus(lines, line_nums))
                        } else {
                            return lines.$concat(line_nums)
                        };
                    } else if ($truthy(negate)) {
                        return lines.$delete(entry.$to_i())
                    } else {
                        return lines['$<<'](entry.$to_i())
                    };}, TMP_49.$$s = self, TMP_49.$$arity = 1, TMP_49));
                return lines.$sort().$uniq();
            }, TMP_ReplacementReplacer_resolve_lines_to_highlight_48.$$arity = 2);

            Opal.def(self, '$extract_passthroughs', TMP_ReplacementReplacer_extract_passthroughs_50 = function $$extract_passthroughs(text) {
                var $a, $b, TMP_51, TMP_52, TMP_53, self = this, compat_mode = nil, passthrus = nil, pass_inline_char1 = nil, pass_inline_char2 = nil, pass_inline_rx = nil;


                compat_mode = self.document.$compat_mode();
                passthrus = self.passthroughs;
                if ($truthy(($truthy($a = ($truthy($b = text['$include?']("++")) ? $b : text['$include?']("$$"))) ? $a : text['$include?']("ss:")))) {
                    text = $send(text, 'gsub', [$$($nesting, 'InlinePassMacroRx')], (TMP_51 = function(){var self = TMP_51.$$s || this, $c, boundary = nil, attrlist = nil, escape_count = nil, preceding = nil, old_behavior = nil, attributes = nil, subs = nil, $writer = nil, passthru_key = nil;


                        if ($truthy((boundary = (($c = $gvars['~']) === nil ? nil : $c['$[]'](4))))) {

                            if ($truthy(($truthy($c = compat_mode) ? boundary['$==']("++") : $c))) {
                                return "" + ((function() {if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](2)))) {
                                    return "" + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](1))) + "[" + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](2))) + "]" + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](3)))
                                } else {
                                    return "" + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](1))) + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](3)))
                                }; return nil; })()) + "++" + (self.$extract_passthroughs((($c = $gvars['~']) === nil ? nil : $c['$[]'](5)))) + "++";};
                            if ($truthy((attrlist = (($c = $gvars['~']) === nil ? nil : $c['$[]'](2))))) {
                                if ($truthy($rb_gt((escape_count = (($c = $gvars['~']) === nil ? nil : $c['$[]'](3)).$length()), 0))) {
                                    return "" + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](1))) + "[" + (attrlist) + "]" + ($rb_times($$($nesting, 'RS'), $rb_minus(escape_count, 1))) + (boundary) + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](5))) + (boundary);
                                } else if ((($c = $gvars['~']) === nil ? nil : $c['$[]'](1))['$==']($$($nesting, 'RS'))) {
                                    preceding = "" + "[" + (attrlist) + "]"
                                } else {

                                    if ($truthy((($c = boundary['$==']("++")) ? attrlist['$end_with?']("x-") : boundary['$==']("++")))) {

                                        old_behavior = true;
                                        attrlist = attrlist.$slice(0, $rb_minus(attrlist.$length(), 2));};
                                    attributes = self.$parse_quoted_text_attributes(attrlist);
                                }
                            } else if ($truthy($rb_gt((escape_count = (($c = $gvars['~']) === nil ? nil : $c['$[]'](3)).$length()), 0))) {
                                return "" + ($rb_times($$($nesting, 'RS'), $rb_minus(escape_count, 1))) + (boundary) + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](5))) + (boundary);};
                            subs = (function() {if (boundary['$==']("+++")) {
                                return []
                            } else {
                                return $$($nesting, 'BASIC_SUBS')
                            }; return nil; })();
                            if ($truthy(attributes)) {
                                if ($truthy(old_behavior)) {

                                    $writer = [(passthru_key = passthrus.$size()), $hash2(["text", "subs", "type", "attributes"], {"text": (($c = $gvars['~']) === nil ? nil : $c['$[]'](5)), "subs": $$($nesting, 'NORMAL_SUBS'), "type": "monospaced", "attributes": attributes})];
                                    $send(passthrus, '[]=', Opal.to_a($writer));
                                    $writer[$rb_minus($writer["length"], 1)];
                                } else {

                                    $writer = [(passthru_key = passthrus.$size()), $hash2(["text", "subs", "type", "attributes"], {"text": (($c = $gvars['~']) === nil ? nil : $c['$[]'](5)), "subs": subs, "type": "unquoted", "attributes": attributes})];
                                    $send(passthrus, '[]=', Opal.to_a($writer));
                                    $writer[$rb_minus($writer["length"], 1)];
                                }
                            } else {

                                $writer = [(passthru_key = passthrus.$size()), $hash2(["text", "subs"], {"text": (($c = $gvars['~']) === nil ? nil : $c['$[]'](5)), "subs": subs})];
                                $send(passthrus, '[]=', Opal.to_a($writer));
                                $writer[$rb_minus($writer["length"], 1)];
                            };
                        } else {

                            if ((($c = $gvars['~']) === nil ? nil : $c['$[]'](6))['$==']($$($nesting, 'RS'))) {
                                return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$slice(1, (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$length());};
                            if ($truthy((subs = (($c = $gvars['~']) === nil ? nil : $c['$[]'](7))))) {

                                $writer = [(passthru_key = passthrus.$size()), $hash2(["text", "subs"], {"text": self.$normalize_text((($c = $gvars['~']) === nil ? nil : $c['$[]'](8)), nil, true), "subs": self.$resolve_pass_subs(subs)})];
                                $send(passthrus, '[]=', Opal.to_a($writer));
                                $writer[$rb_minus($writer["length"], 1)];
                            } else {

                                $writer = [(passthru_key = passthrus.$size()), $hash2(["text"], {"text": self.$normalize_text((($c = $gvars['~']) === nil ? nil : $c['$[]'](8)), nil, true)})];
                                $send(passthrus, '[]=', Opal.to_a($writer));
                                $writer[$rb_minus($writer["length"], 1)];
                            };
                        };
                        return "" + (($truthy($c = preceding) ? $c : "")) + ($$($nesting, 'PASS_START')) + (passthru_key) + ($$($nesting, 'PASS_END'));}, TMP_51.$$s = self, TMP_51.$$arity = 0, TMP_51))};
                $b = $$($nesting, 'InlinePassRx')['$[]'](compat_mode), $a = Opal.to_ary($b), (pass_inline_char1 = ($a[0] == null ? nil : $a[0])), (pass_inline_char2 = ($a[1] == null ? nil : $a[1])), (pass_inline_rx = ($a[2] == null ? nil : $a[2])), $b;
                if ($truthy(($truthy($a = text['$include?'](pass_inline_char1)) ? $a : ($truthy($b = pass_inline_char2) ? text['$include?'](pass_inline_char2) : $b)))) {
                    text = $send(text, 'gsub', [pass_inline_rx], (TMP_52 = function(){var self = TMP_52.$$s || this, $c, preceding = nil, attrlist = nil, quoted_text = nil, escape_mark = nil, format_mark = nil, content = nil, old_behavior = nil, attributes = nil, $writer = nil, passthru_key = nil, subs = nil;


                        preceding = (($c = $gvars['~']) === nil ? nil : $c['$[]'](1));
                        attrlist = (($c = $gvars['~']) === nil ? nil : $c['$[]'](2));
                        if ($truthy((quoted_text = (($c = $gvars['~']) === nil ? nil : $c['$[]'](3)))['$start_with?']($$($nesting, 'RS')))) {
                            escape_mark = $$($nesting, 'RS')};
                        format_mark = (($c = $gvars['~']) === nil ? nil : $c['$[]'](4));
                        content = (($c = $gvars['~']) === nil ? nil : $c['$[]'](5));
                        if ($truthy(compat_mode)) {
                            old_behavior = true
                        } else if ($truthy((old_behavior = ($truthy($c = attrlist) ? attrlist['$end_with?']("x-") : $c)))) {
                            attrlist = attrlist.$slice(0, $rb_minus(attrlist.$length(), 2))};
                        if ($truthy(attrlist)) {
                            if ($truthy((($c = format_mark['$==']("`")) ? old_behavior['$!']() : format_mark['$==']("`")))) {
                                return self.$extract_inner_passthrough(content, "" + (preceding) + "[" + (attrlist) + "]" + (escape_mark));
                            } else if ($truthy(escape_mark)) {
                                return "" + (preceding) + "[" + (attrlist) + "]" + (quoted_text.$slice(1, quoted_text.$length()));
                            } else if (preceding['$==']($$($nesting, 'RS'))) {
                                preceding = "" + "[" + (attrlist) + "]"
                            } else {
                                attributes = self.$parse_quoted_text_attributes(attrlist)
                            }
                        } else if ($truthy((($c = format_mark['$==']("`")) ? old_behavior['$!']() : format_mark['$==']("`")))) {
                            return self.$extract_inner_passthrough(content, "" + (preceding) + (escape_mark));
                        } else if ($truthy(escape_mark)) {
                            return "" + (preceding) + (quoted_text.$slice(1, quoted_text.$length()));};
                        if ($truthy(compat_mode)) {

                            $writer = [(passthru_key = passthrus.$size()), $hash2(["text", "subs", "attributes", "type"], {"text": content, "subs": $$($nesting, 'BASIC_SUBS'), "attributes": attributes, "type": "monospaced"})];
                            $send(passthrus, '[]=', Opal.to_a($writer));
                            $writer[$rb_minus($writer["length"], 1)];
                        } else if ($truthy(attributes)) {
                            if ($truthy(old_behavior)) {

                                subs = (function() {if (format_mark['$==']("`")) {
                                    return $$($nesting, 'BASIC_SUBS')
                                } else {
                                    return $$($nesting, 'NORMAL_SUBS')
                                }; return nil; })();

                                $writer = [(passthru_key = passthrus.$size()), $hash2(["text", "subs", "attributes", "type"], {"text": content, "subs": subs, "attributes": attributes, "type": "monospaced"})];
                                $send(passthrus, '[]=', Opal.to_a($writer));
                                $writer[$rb_minus($writer["length"], 1)];;
                            } else {

                                $writer = [(passthru_key = passthrus.$size()), $hash2(["text", "subs", "attributes", "type"], {"text": content, "subs": $$($nesting, 'BASIC_SUBS'), "attributes": attributes, "type": "unquoted"})];
                                $send(passthrus, '[]=', Opal.to_a($writer));
                                $writer[$rb_minus($writer["length"], 1)];
                            }
                        } else {

                            $writer = [(passthru_key = passthrus.$size()), $hash2(["text", "subs"], {"text": content, "subs": $$($nesting, 'BASIC_SUBS')})];
                            $send(passthrus, '[]=', Opal.to_a($writer));
                            $writer[$rb_minus($writer["length"], 1)];
                        };
                        return "" + (preceding) + ($$($nesting, 'PASS_START')) + (passthru_key) + ($$($nesting, 'PASS_END'));}, TMP_52.$$s = self, TMP_52.$$arity = 0, TMP_52))};
                if ($truthy(($truthy($a = text['$include?'](":")) ? ($truthy($b = text['$include?']("stem:")) ? $b : text['$include?']("math:")) : $a))) {
                    text = $send(text, 'gsub', [$$($nesting, 'InlineStemMacroRx')], (TMP_53 = function(){var self = TMP_53.$$s || this, $c, $d, type = nil, subs = nil, content = nil, $writer = nil, passthru_key = nil;
                        if (self.document == null) self.document = nil;


                        if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](0))['$start_with?']($$($nesting, 'RS')))) {
                            return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$slice(1, (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$length());};
                        if ((type = (($c = $gvars['~']) === nil ? nil : $c['$[]'](1)).$to_sym())['$==']("stem")) {
                            type = $$($nesting, 'STEM_TYPE_ALIASES')['$[]'](self.document.$attributes()['$[]']("stem")).$to_sym()};
                        subs = (($c = $gvars['~']) === nil ? nil : $c['$[]'](2));
                        content = self.$normalize_text((($c = $gvars['~']) === nil ? nil : $c['$[]'](3)), nil, true);
                        if ($truthy(($truthy($c = (($d = type['$==']("latexmath")) ? content['$start_with?']("$") : type['$==']("latexmath"))) ? content['$end_with?']("$") : $c))) {
                            content = content.$slice(1, $rb_minus(content.$length(), 2))};
                        subs = (function() {if ($truthy(subs)) {

                            return self.$resolve_pass_subs(subs);
                        } else {

                            if ($truthy(self.document['$basebackend?']("html"))) {
                                return $$($nesting, 'BASIC_SUBS')
                            } else {
                                return nil
                            };
                        }; return nil; })();

                        $writer = [(passthru_key = passthrus.$size()), $hash2(["text", "subs", "type"], {"text": content, "subs": subs, "type": type})];
                        $send(passthrus, '[]=', Opal.to_a($writer));
                        $writer[$rb_minus($writer["length"], 1)];;
                        return "" + ($$($nesting, 'PASS_START')) + (passthru_key) + ($$($nesting, 'PASS_END'));}, TMP_53.$$s = self, TMP_53.$$arity = 0, TMP_53))};
                return text;
            }, TMP_ReplacementReplacer_extract_passthroughs_50.$$arity = 1);

            Opal.def(self, '$restore_passthroughs', TMP_ReplacementReplacer_restore_passthroughs_54 = function $$restore_passthroughs(text) {
                var TMP_55, self = this, passthrus = nil;


                passthrus = self.passthroughs;
                return $send(text, 'gsub', [$$($nesting, 'PassSlotRx')], (TMP_55 = function(){var self = TMP_55.$$s || this, $a, pass = nil, subbed_text = nil, type = nil, attributes = nil, id = nil;

                    if ($truthy((pass = passthrus['$[]']((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)).$to_i())))) {

                        subbed_text = self.$apply_subs(pass['$[]']("text"), pass['$[]']("subs"));
                        if ($truthy((type = pass['$[]']("type")))) {

                            if ($truthy((attributes = pass['$[]']("attributes")))) {
                                id = attributes['$[]']("id")};
                            subbed_text = $$($nesting, 'Inline').$new(self, "quoted", subbed_text, $hash2(["type", "id", "attributes"], {"type": type, "id": id, "attributes": attributes})).$convert();};
                        if ($truthy(subbed_text['$include?']($$($nesting, 'PASS_START')))) {
                            return self.$restore_passthroughs(subbed_text)
                        } else {
                            return subbed_text
                        };
                    } else {

                        self.$logger().$error("" + "unresolved passthrough detected: " + (text));
                        return "??pass??";
                    }}, TMP_55.$$s = self, TMP_55.$$arity = 0, TMP_55));
            }, TMP_ReplacementReplacer_restore_passthroughs_54.$$arity = 1);

            Opal.def(self, '$resolve_subs', TMP_ReplacementReplacer_resolve_subs_56 = function $$resolve_subs(subs, type, defaults, subject) {
                var TMP_57, self = this, candidates = nil, modifiers_present = nil, resolved = nil, invalid = nil;



                if (type == null) {
                    type = "block";
                };

                if (defaults == null) {
                    defaults = nil;
                };

                if (subject == null) {
                    subject = nil;
                };
                if ($truthy(subs['$nil_or_empty?']())) {
                    return nil};
                candidates = nil;
                if ($truthy(subs['$include?'](" "))) {
                    subs = subs.$delete(" ")};
                modifiers_present = $$($nesting, 'SubModifierSniffRx')['$match?'](subs);
                $send(subs.$split(","), 'each', [], (TMP_57 = function(key){var self = TMP_57.$$s || this, $a, $b, modifier_operation = nil, first = nil, resolved_keys = nil, resolved_key = nil, candidate = nil, $case = nil;



                    if (key == null) {
                        key = nil;
                    };
                    modifier_operation = nil;
                    if ($truthy(modifiers_present)) {
                        if ((first = key.$chr())['$==']("+")) {

                            modifier_operation = "append";
                            key = key.$slice(1, key.$length());
                        } else if (first['$==']("-")) {

                            modifier_operation = "remove";
                            key = key.$slice(1, key.$length());
                        } else if ($truthy(key['$end_with?']("+"))) {

                            modifier_operation = "prepend";
                            key = key.$chop();}};
                    key = key.$to_sym();
                    if ($truthy((($a = type['$==']("inline")) ? ($truthy($b = key['$==']("verbatim")) ? $b : key['$==']("v")) : type['$==']("inline")))) {
                        resolved_keys = $$($nesting, 'BASIC_SUBS')
                    } else if ($truthy($$($nesting, 'SUB_GROUPS')['$key?'](key))) {
                        resolved_keys = $$($nesting, 'SUB_GROUPS')['$[]'](key)
                    } else if ($truthy(($truthy($a = (($b = type['$==']("inline")) ? key.$length()['$=='](1) : type['$==']("inline"))) ? $$($nesting, 'SUB_HINTS')['$key?'](key) : $a))) {

                        resolved_key = $$($nesting, 'SUB_HINTS')['$[]'](key);
                        if ($truthy((candidate = $$($nesting, 'SUB_GROUPS')['$[]'](resolved_key)))) {
                            resolved_keys = candidate
                        } else {
                            resolved_keys = [resolved_key]
                        };
                    } else {
                        resolved_keys = [key]
                    };
                    if ($truthy(modifier_operation)) {

                        candidates = ($truthy($a = candidates) ? $a : (function() {if ($truthy(defaults)) {

                            return defaults.$drop(0);
                        } else {
                            return []
                        }; return nil; })());
                        return (function() {$case = modifier_operation;
                            if ("append"['$===']($case)) {return (candidates = $rb_plus(candidates, resolved_keys))}
                            else if ("prepend"['$===']($case)) {return (candidates = $rb_plus(resolved_keys, candidates))}
                            else if ("remove"['$===']($case)) {return (candidates = $rb_minus(candidates, resolved_keys))}
                            else { return nil }})();
                    } else {

                        candidates = ($truthy($a = candidates) ? $a : []);
                        return (candidates = $rb_plus(candidates, resolved_keys));
                    };}, TMP_57.$$s = self, TMP_57.$$arity = 1, TMP_57));
                if ($truthy(candidates)) {
                } else {
                    return nil
                };
                resolved = candidates['$&']($$($nesting, 'SUB_OPTIONS')['$[]'](type));
                if ($truthy($rb_minus(candidates, resolved)['$empty?']())) {
                } else {

                    invalid = $rb_minus(candidates, resolved);
                    self.$logger().$warn("" + "invalid substitution type" + ((function() {if ($truthy($rb_gt(invalid.$size(), 1))) {
                        return "s"
                    } else {
                        return ""
                    }; return nil; })()) + ((function() {if ($truthy(subject)) {
                        return " for "
                    } else {
                        return ""
                    }; return nil; })()) + (subject) + ": " + (invalid.$join(", ")));
                };
                return resolved;
            }, TMP_ReplacementReplacer_resolve_subs_56.$$arity = -2);

            Opal.def(self, '$resolve_block_subs', TMP_ReplacementReplacer_resolve_block_subs_58 = function $$resolve_block_subs(subs, defaults, subject) {
                var self = this;

                return self.$resolve_subs(subs, "block", defaults, subject)
            }, TMP_ReplacementReplacer_resolve_block_subs_58.$$arity = 3);

            Opal.def(self, '$resolve_pass_subs', TMP_ReplacementReplacer_resolve_pass_subs_59 = function $$resolve_pass_subs(subs) {
                var self = this;

                return self.$resolve_subs(subs, "inline", nil, "passthrough macro")
            }, TMP_ReplacementReplacer_resolve_pass_subs_59.$$arity = 1);

            Opal.def(self, '$expand_subs', TMP_ReplacementReplacer_expand_subs_60 = function $$expand_subs(subs) {
                var $a, TMP_61, self = this, expanded_subs = nil;

                if ($truthy($$$('::', 'Symbol')['$==='](subs))) {
                    if (subs['$==']("none")) {
                        return nil
                    } else {
                        return ($truthy($a = $$($nesting, 'SUB_GROUPS')['$[]'](subs)) ? $a : [subs])
                    }
                } else {

                    expanded_subs = [];
                    $send(subs, 'each', [], (TMP_61 = function(key){var self = TMP_61.$$s || this, sub_group = nil;



                        if (key == null) {
                            key = nil;
                        };
                        if (key['$==']("none")) {
                            return nil
                        } else if ($truthy((sub_group = $$($nesting, 'SUB_GROUPS')['$[]'](key)))) {
                            return (expanded_subs = $rb_plus(expanded_subs, sub_group))
                        } else {
                            return expanded_subs['$<<'](key)
                        };}, TMP_61.$$s = self, TMP_61.$$arity = 1, TMP_61));
                    if ($truthy(expanded_subs['$empty?']())) {
                        return nil
                    } else {
                        return expanded_subs
                    };
                }
            }, TMP_ReplacementReplacer_expand_subs_60.$$arity = 1);

            Opal.def(self, '$commit_subs', TMP_ReplacementReplacer_commit_subs_62 = function $$commit_subs() {
                var $a, $b, $c, $d, self = this, default_subs = nil, $case = nil, custom_subs = nil, syntax_hl = nil, idx = nil, $writer = nil;


                if ($truthy((default_subs = self.default_subs))) {
                } else {
                    $case = self.content_model;
                    if ("simple"['$===']($case)) {default_subs = $$($nesting, 'NORMAL_SUBS')}
                    else if ("verbatim"['$===']($case)) {default_subs = (function() {if (self.context['$==']("verse")) {
                        return $$($nesting, 'NORMAL_SUBS')
                    } else {
                        return $$($nesting, 'VERBATIM_SUBS')
                    }; return nil; })()}
                    else if ("raw"['$===']($case)) {default_subs = (function() {if (self.context['$==']("stem")) {
                        return $$($nesting, 'BASIC_SUBS')
                    } else {
                        return $$($nesting, 'NO_SUBS')
                    }; return nil; })()}
                    else {return self.subs}
                };
                if ($truthy((custom_subs = self.attributes['$[]']("subs")))) {
                    self.subs = ($truthy($a = self.$resolve_block_subs(custom_subs, default_subs, self.context)) ? $a : [])
                } else {
                    self.subs = default_subs.$drop(0)
                };
                if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = (($d = self.context['$==']("listing")) ? self.style['$==']("source") : self.context['$==']("listing"))) ? (syntax_hl = self.document.$syntax_highlighter()) : $c)) ? syntax_hl['$highlight?']() : $b)) ? (idx = self.subs.$index("specialcharacters")) : $a))) {

                    $writer = [idx, "highlight"];
                    $send(self.subs, '[]=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];};
                return nil;
            }, TMP_ReplacementReplacer_commit_subs_62.$$arity = 0);

            Opal.def(self, '$parse_attributes', TMP_ReplacementReplacer_parse_attributes_63 = function $$parse_attributes(attrlist, posattrs, opts) {
                var $a, self = this, block = nil, into = nil;



                if (posattrs == null) {
                    posattrs = [];
                };

                if (opts == null) {
                    opts = $hash2([], {});
                };
                if ($truthy((function() {if ($truthy(attrlist)) {
                    return attrlist['$empty?']()
                } else {
                    return true
                }; return nil; })())) {
                    return $hash2([], {})};
                if ($truthy(opts['$[]']("unescape_input"))) {
                    attrlist = self.$normalize_text(attrlist, true, true)};
                if ($truthy(($truthy($a = opts['$[]']("sub_input")) ? attrlist['$include?']($$($nesting, 'ATTR_REF_HEAD')) : $a))) {
                    attrlist = self.document.$sub_attributes(attrlist)};
                if ($truthy(opts['$[]']("sub_result"))) {
                    block = self};
                if ($truthy((into = opts['$[]']("into")))) {
                    return $$($nesting, 'AttributeList').$new(attrlist, block).$parse_into(into, posattrs)
                } else {
                    return $$($nesting, 'AttributeList').$new(attrlist, block).$parse(posattrs)
                };
            }, TMP_ReplacementReplacer_parse_attributes_63.$$arity = -2);
            self.$private();

            Opal.def(self, '$extract_callouts', TMP_ReplacementReplacer_extract_callouts_64 = function $$extract_callouts(source) {
                var TMP_65, self = this, callout_marks = nil, lineno = nil, last_lineno = nil, callout_rx = nil;


                callout_marks = $hash2([], {});
                lineno = 0;
                last_lineno = nil;
                callout_rx = (function() {if ($truthy(self['$attr?']("line-comment"))) {
                    return $$($nesting, 'CalloutExtractRxMap')['$[]'](self.$attr("line-comment"))
                } else {
                    return $$($nesting, 'CalloutExtractRx')
                }; return nil; })();
                source = $send(source.$split($$($nesting, 'LF'), -1), 'map', [], (TMP_65 = function(line){var self = TMP_65.$$s || this, TMP_66;



                    if (line == null) {
                        line = nil;
                    };
                    lineno = $rb_plus(lineno, 1);
                    return $send(line, 'gsub', [callout_rx], (TMP_66 = function(){var self = TMP_66.$$s || this, $a, $writer = nil;

                        if ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](2)))) {
                            return (($a = $gvars['~']) === nil ? nil : $a['$[]'](0)).$sub($$($nesting, 'RS'), "")
                        } else {

                            ($truthy($a = callout_marks['$[]'](lineno)) ? $a : (($writer = [lineno, []]), $send(callout_marks, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))['$<<']([(($a = $gvars['~']) === nil ? nil : $a['$[]'](1)), (($a = $gvars['~']) === nil ? nil : $a['$[]'](4))]);
                            last_lineno = lineno;
                            return "";
                        }}, TMP_66.$$s = self, TMP_66.$$arity = 0, TMP_66));}, TMP_65.$$s = self, TMP_65.$$arity = 1, TMP_65)).$join($$($nesting, 'LF'));
                if ($truthy(last_lineno)) {
                    if (last_lineno['$=='](lineno)) {
                        source = "" + (source) + ($$($nesting, 'LF'))}
                } else {
                    callout_marks = nil
                };
                return [source, callout_marks];
            }, TMP_ReplacementReplacer_extract_callouts_64.$$arity = 1);

            Opal.def(self, '$restore_callouts', TMP_ReplacementReplacer_restore_callouts_67 = function $$restore_callouts(source, callout_marks, source_offset) {
                var TMP_68, self = this, preamble = nil, autonum = nil, lineno = nil;



                if (source_offset == null) {
                    source_offset = nil;
                };
                if ($truthy(source_offset)) {

                    preamble = source.$slice(0, source_offset);
                    source = source.$slice(source_offset, source.$length());
                } else {
                    preamble = ""
                };
                autonum = (lineno = 0);
                return $rb_plus(preamble, $send(source.$split($$($nesting, 'LF'), -1), 'map', [], (TMP_68 = function(line){var self = TMP_68.$$s || this, $a, $b, TMP_69, conums = nil, guard = nil, conum = nil;
                    if (self.document == null) self.document = nil;



                    if (line == null) {
                        line = nil;
                    };
                    if ($truthy((conums = callout_marks.$delete((lineno = $rb_plus(lineno, 1)))))) {
                        if (conums.$size()['$=='](1)) {

                            $b = conums['$[]'](0), $a = Opal.to_ary($b), (guard = ($a[0] == null ? nil : $a[0])), (conum = ($a[1] == null ? nil : $a[1])), $b;
                            return "" + (line) + ($$($nesting, 'Inline').$new(self, "callout", (function() {if (conum['$=='](".")) {
                                return (autonum = $rb_plus(autonum, 1)).$to_s()
                            } else {
                                return conum
                            }; return nil; })(), $hash2(["id", "attributes"], {"id": self.document.$callouts().$read_next_id(), "attributes": $hash2(["guard"], {"guard": guard})})).$convert());
                        } else {
                            return "" + (line) + ($send(conums, 'map', [], (TMP_69 = function(guard_it, conum_it){var self = TMP_69.$$s || this;
                                if (self.document == null) self.document = nil;



                                if (guard_it == null) {
                                    guard_it = nil;
                                };

                                if (conum_it == null) {
                                    conum_it = nil;
                                };
                                return $$($nesting, 'Inline').$new(self, "callout", (function() {if (conum_it['$=='](".")) {
                                    return (autonum = $rb_plus(autonum, 1)).$to_s()
                                } else {
                                    return conum_it
                                }; return nil; })(), $hash2(["id", "attributes"], {"id": self.document.$callouts().$read_next_id(), "attributes": $hash2(["guard"], {"guard": guard_it})})).$convert();}, TMP_69.$$s = self, TMP_69.$$arity = 2, TMP_69)).$join(" "))
                        }
                    } else {
                        return line
                    };}, TMP_68.$$s = self, TMP_68.$$arity = 1, TMP_68)).$join($$($nesting, 'LF')));
            }, TMP_ReplacementReplacer_restore_callouts_67.$$arity = -3);

            Opal.def(self, '$extract_inner_passthrough', TMP_ReplacementReplacer_extract_inner_passthrough_70 = function $$extract_inner_passthrough(text, pre) {
                var $a, $b, self = this, $writer = nil, passthru_key = nil;

                if ($truthy(($truthy($a = ($truthy($b = text['$end_with?']("+")) ? text['$start_with?']("+", "\\+") : $b)) ? $$($nesting, 'SinglePlusInlinePassRx')['$=~'](text) : $a))) {
                    if ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)))) {
                        return "" + (pre) + "`+" + ((($a = $gvars['~']) === nil ? nil : $a['$[]'](2))) + "+`"
                    } else {


                        $writer = [(passthru_key = self.passthroughs.$size()), $hash2(["text", "subs"], {"text": (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)), "subs": $$($nesting, 'BASIC_SUBS')})];
                        $send(self.passthroughs, '[]=', Opal.to_a($writer));
                        $writer[$rb_minus($writer["length"], 1)];;
                        return "" + (pre) + "`" + ($$($nesting, 'PASS_START')) + (passthru_key) + ($$($nesting, 'PASS_END')) + "`";
                    }
                } else {
                    return "" + (pre) + "`" + (text) + "`"
                }
            }, TMP_ReplacementReplacer_extract_inner_passthrough_70.$$arity = 2);

            Opal.def(self, '$convert_quoted_text', TMP_ReplacementReplacer_convert_quoted_text_71 = function $$convert_quoted_text(match, type, scope) {
                var $a, self = this, attrs = nil, unescaped_attrs = nil, attrlist = nil, id = nil, attributes = nil;


                if ($truthy(match['$[]'](0)['$start_with?']($$($nesting, 'RS')))) {
                    if ($truthy((($a = scope['$==']("constrained")) ? (attrs = match['$[]'](2)) : scope['$==']("constrained")))) {
                        unescaped_attrs = "" + "[" + (attrs) + "]"
                    } else {
                        return match['$[]'](0).$slice(1, match['$[]'](0).$length())
                    }};
                if (scope['$==']("constrained")) {
                    if ($truthy(unescaped_attrs)) {
                        return "" + (unescaped_attrs) + ($$($nesting, 'Inline').$new(self, "quoted", match['$[]'](3), $hash2(["type"], {"type": type})).$convert())
                    } else {

                        if ($truthy((attrlist = match['$[]'](2)))) {

                            id = (attributes = self.$parse_quoted_text_attributes(attrlist))['$[]']("id");
                            if (type['$==']("mark")) {
                                type = "unquoted"};};
                        return "" + (match['$[]'](1)) + ($$($nesting, 'Inline').$new(self, "quoted", match['$[]'](3), $hash2(["type", "id", "attributes"], {"type": type, "id": id, "attributes": attributes})).$convert());
                    }
                } else {

                    if ($truthy((attrlist = match['$[]'](1)))) {

                        id = (attributes = self.$parse_quoted_text_attributes(attrlist))['$[]']("id");
                        if (type['$==']("mark")) {
                            type = "unquoted"};};
                    return $$($nesting, 'Inline').$new(self, "quoted", match['$[]'](2), $hash2(["type", "id", "attributes"], {"type": type, "id": id, "attributes": attributes})).$convert();
                };
            }, TMP_ReplacementReplacer_convert_quoted_text_71.$$arity = 3);

            Opal.def(self, '$do_replacement', TMP_ReplacementReplacer_do_replacement_72 = function $$do_replacement(m, replacement, restore) {
                var self = this, captured = nil, $case = nil;

                if ($truthy((captured = m['$[]'](0))['$include?']($$($nesting, 'RS')))) {
                    return captured.$sub($$($nesting, 'RS'), "")
                } else {
                    return (function() {$case = restore;
                        if ("none"['$===']($case)) {return replacement}
                        else if ("bounding"['$===']($case)) {return $rb_plus($rb_plus(m['$[]'](1), replacement), m['$[]'](2))}
                        else {return $rb_plus(m['$[]'](1), replacement)}})()
                }
            }, TMP_ReplacementReplacer_do_replacement_72.$$arity = 3);
            if ($$($nesting, 'RUBY_ENGINE')['$==']("opal")) {
            } else {
                nil
            };

            Opal.def(self, '$parse_quoted_text_attributes', TMP_ReplacementReplacer_parse_quoted_text_attributes_73 = function $$parse_quoted_text_attributes(str) {
                var $a, $b, self = this, segments = nil, id = nil, more_roles = nil, roles = nil, attrs = nil, $writer = nil;


                if ($truthy((str = str.$rstrip())['$empty?']())) {
                    return $hash2([], {})};
                if ($truthy(str['$include?']($$($nesting, 'ATTR_REF_HEAD')))) {
                    str = self.$sub_attributes(str)};
                if ($truthy(str['$include?'](","))) {
                    str = str.$slice(0, str.$index(","))};
                if ($truthy(($truthy($a = str['$start_with?'](".", "#")) ? $$($nesting, 'Compliance').$shorthand_property_syntax() : $a))) {

                    segments = str.$split("#", 2);
                    if ($truthy($rb_gt(segments.$size(), 1))) {
                        $b = segments['$[]'](1).$split("."), $a = Opal.to_ary($b), (id = ($a[0] == null ? nil : $a[0])), (more_roles = $slice.call($a, 1)), $b
                    } else {
                        more_roles = []
                    };
                    roles = (function() {if ($truthy(segments['$[]'](0)['$empty?']())) {
                        return []
                    } else {
                        return segments['$[]'](0).$split(".")
                    }; return nil; })();
                    if ($truthy($rb_gt(roles.$size(), 1))) {
                        roles.$shift()};
                    if ($truthy($rb_gt(more_roles.$size(), 0))) {
                        roles.$concat(more_roles)};
                    attrs = $hash2([], {});
                    if ($truthy(id)) {

                        $writer = ["id", id];
                        $send(attrs, '[]=', Opal.to_a($writer));
                        $writer[$rb_minus($writer["length"], 1)];};
                    if ($truthy(roles['$empty?']())) {
                    } else {

                        $writer = ["role", roles.$join(" ")];
                        $send(attrs, '[]=', Opal.to_a($writer));
                        $writer[$rb_minus($writer["length"], 1)];
                    };
                    return attrs;
                } else {
                    return $hash2(["role"], {"role": str})
                };
            }, TMP_ReplacementReplacer_parse_quoted_text_attributes_73.$$arity = 1);

            Opal.def(self, '$normalize_text', TMP_ReplacementReplacer_normalize_text_74 = function $$normalize_text(text, normalize_whitespace, unescape_closing_square_brackets) {
                var $a, self = this;



                if (normalize_whitespace == null) {
                    normalize_whitespace = nil;
                };

                if (unescape_closing_square_brackets == null) {
                    unescape_closing_square_brackets = nil;
                };
                if ($truthy(text['$empty?']())) {
                } else {

                    if ($truthy(normalize_whitespace)) {
                        text = text.$strip().$tr($$($nesting, 'LF'), " ")};
                    if ($truthy(($truthy($a = unescape_closing_square_brackets) ? text['$include?']($$($nesting, 'R_SB')) : $a))) {
                        text = text.$gsub($$($nesting, 'ESC_R_SB'), $$($nesting, 'R_SB'))};
                };
                return text;
            }, TMP_ReplacementReplacer_normalize_text_74.$$arity = -2);
            return (Opal.def(self, '$split_simple_csv', TMP_ReplacementReplacer_split_simple_csv_75 = function $$split_simple_csv(str) {
                var TMP_76, TMP_77, self = this, values = nil, accum = nil, quote_open = nil;

                if ($truthy(str['$empty?']())) {
                    return []
                } else if ($truthy(str['$include?']("\""))) {

                    values = [];
                    accum = "";
                    quote_open = nil;
                    $send(str, 'each_char', [], (TMP_76 = function(c){var self = TMP_76.$$s || this, $case = nil;



                        if (c == null) {
                            c = nil;
                        };
                        return (function() {$case = c;
                            if (","['$===']($case)) {if ($truthy(quote_open)) {
                                return (accum = $rb_plus(accum, c))
                            } else {

                                values['$<<'](accum.$strip());
                                return (accum = "");
                            }}
                            else if ("\""['$===']($case)) {return (quote_open = quote_open['$!']())}
                            else {return (accum = $rb_plus(accum, c))}})();}, TMP_76.$$s = self, TMP_76.$$arity = 1, TMP_76));
                    return values['$<<'](accum.$strip());
                } else {
                    return $send(str.$split(","), 'map', [], (TMP_77 = function(it){var self = TMP_77.$$s || this;



                        if (it == null) {
                            it = nil;
                        };
                        return it.$strip();}, TMP_77.$$s = self, TMP_77.$$arity = 1, TMP_77))
                }
            }, TMP_ReplacementReplacer_split_simple_csv_75.$$arity = 1), nil) && 'split_simple_csv';
        })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
})(Opal);

// Dikkat moved to global
function $ReplacementReplacer(){};

var replacer_object = null;
function apply_replacements(text) {
    replacer_object= replacer_object || new $ReplacementReplacer();
    return replacer_object.$sub_replacements(text);
}