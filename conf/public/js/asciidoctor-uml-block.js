/* Generated by Opal 0.6.3 */
function process_uml_block(obj) {

    var attrs = obj["attrs"];
    var parent = obj["parent"];
    var reader = obj["reader"];
    var self = obj["self"];
    var nil = obj["nil"];
    var name = obj["name"];

    var title = "" + (attrs['$[]']("title")),
        alt = "" + (attrs['$[]']("alt")),
        caption = "" + (attrs['$[]']("caption")),
        width = "" + (attrs['$[]']("width")),
        height = "" + (attrs['$[]']("height")),
        scale = "" + (attrs['$[]']("scale")),
        align = "" + (attrs['$[]']("align")),
        type = "" + (attrs['$[]']("type")),
        cache = "" + (attrs['$[]']("cache")),
        role = "" + (attrs['$[]']("role")),
        link = "" + (attrs['$[]']("link")),
        float = "" + (attrs['$[]']("float")),
        imagesdir = parent.$document().$attr('imagesdir', '');

    var filename = "";

    if (!attrs['$[]']("file")["$nil?"]()) {
        filename = "" + attrs['$[]']("file");
    }
    else if (!attrs['$[]'](2)["$nil?"]() && !attrs['$[]'](3)["$nil?"]()) {
        filename = "" + (attrs['$[]'](2) + "." + attrs['$[]'](3));
    }

    if (filename == "") {
        return nil;
    }

    var target = parent.$image_uri(filename);

    if (cache != "enabled") {
        afx[name](reader.$read(), type, imagesdir, target);
    }

    var attributes = {
        "target": filename,
        "title": title,
        "alt": alt,
        "caption": caption,
        "width": width,
        "height": height,
        "scale": scale,
        "align": align,
        "role": role,
        "link": link,
        "float": float
    };

    return self.$create_image_block(parent, Opal.hash(attributes));

};

var declare_block = (function ($opal, name) {
    var $a, self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass, $hash2 = $opal.hash2;

    if ($scope.RUBY_ENGINE['$==']("opal")) {
    }
    ;
    self.$include((($a = $opal.Object._scope.Asciidoctor) == null ? $opal.cm('Asciidoctor') : $a));
    return (function ($base, $super) {
        function BLOCKFUNCTION() {
        };
        var self = BLOCKFUNCTION = $klass($base, $super, (name + 'Block'), BLOCKFUNCTION);
        var def = self._proto, $scope = self._scope;

        self.$use_dsl();
        self.$named(name);
        self.$on_context(["open", "literal", "listing"]);
        self.$parse_content_as("literal");

        return (def.$process = function (parent, reader, attrs) {
                var $a, self = this;

                return process_uml_block({
                    parent: parent,
                    reader: reader,
                    attrs: attrs,
                    self: self,
                    nil: nil,
                    name: name
                });

            }, nil) && 'process';
    })(self, ($scope.Extensions)._scope.BlockProcessor);
});

/* Generated by Opal 0.6.3 */
var register_block = (function ($opal, name) {
    var $a, $b, TMP_1, self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice;

    if ($scope.RUBY_ENGINE['$==']("opal")) {
    }
    ;
    return ($a = ($b = $scope.Extensions).$register, $a._p = (TMP_1 = function () {
        var self = TMP_1._s || this;

        return self.$block($scope[name + "Block"])
    }, TMP_1._s = self, TMP_1), $a).call($b);
});


declare_block(Opal, "uml");
declare_block(Opal, "plantuml");
declare_block(Opal, "ditaa");
declare_block(Opal, "math");

register_block(Opal, "uml");
register_block(Opal, "plantuml");
register_block(Opal, "ditaa");
register_block(Opal, "math");
